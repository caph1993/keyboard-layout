
(defcfg
  danger-enable-cmd yes
  movemouse-inherit-accel-state yes
  movemouse-smooth-diagonals yes
  sequence-input-mode visible-backspaced ;; shows the sequence as it is typed
  ;; sequence-input-mode hidden-delay-type ;; hides while typing. Outputs if invalid
  sequence-timeout 8000 ;; 8 seconds maximum between key presses in sldr sequence
)
(defsrc
  esc  f1  f2   f3  f4   f5  f6   f7  f8   f9 f10  f11  f12 ins del
  grv   1    2    3    4    5    6    7    8    9    0    -    = bspc
  tab    q    w    e    r    t    y    u    i    o    p    [    ] \ 
  caps    a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft     z    x    c    v    b    n    m    ,    .    /        rsft
  lctl   lmet lalt          spc             ralt rctl left up down right
)

;; My natural right hand position when typing text is the following:
;; index finger on the joint (J,N,M)
;; middle finger on the (I)
;; anular finger on the (O)
;; pinky finger on the ([)
;; thumb finger on the laptop, below (ralt) and unable to reach it comfortably, but with the tip over the (space bar)

;; My natural right hand position when typing text is the following:
;; index finger on (f)
;; middle finger on the joint (r,4)
;; anular finger on the joint (3,e)
;; pinky finger on the joint (1,tab,q)
;; thumb finger symmetric to the left, below (lalt) unable to reach it comfortably, but with the tip over the (space bar)

;; jiko
;; erdf
;; 
;; Activate with (q hold then w) deactivate with (q)
;; Activate with ([ hold then p) deactivate with ([)
;; backspace with (t) and (u), with the thumb
;; ctrl with (space bar), with the thumb
;; alt with (lalt) and (ralt), with the thumb
;; @fn with (rctl) and (super) with the thumb
;; 
;; shift with (w) and (p), with the pinky
;; tab with (g) and (h)
;; 
;; @enter_navigation with (b)
;; Shortcuts ctrl c v x z y.

(deflayer main
  @esc  _   _    _   _    _   _    _   _    _  _    _    _   _   @del 
  @`   @1    @2   @3   _    _    @6   _    _    _    _    _    @= @bspc 
  @tab   _    _    _    _    _    _    _    _    _    _    @[   _ _ 
  _       _    _    _    _    _    _    _    _    _    _    _     _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    @lalt           _               _    _    @← @↑ @↓ @→   
)
;; nop0 is "fn" button
(defalias ← (fork left  home   (nop0)))
;; (defalias ↑ (fork up    ⇞      (nop0)))
(defalias ↑ (fork up    pgup      (nop0)))
(defalias ↓ (fork down  pgdn      (nop0)))
(defalias → (fork right end    (nop0)))
(defalias bspc (fork bspc (macro S-home bspc) (nop0)))
(defalias del  (fork del  (macro S-end  del ) (nop0)))
(defalias esc (multi esc (on-press tap-vkey vkey-layouts-release)))
(defalias lalt (multi lalt (layer-while-held hold-lalt)))
(deflayermap (hold-lalt) 4 @tab 5 @esc)

(defoverrides
  (lsft bspc) (del)
  (lsft del) (bspc)
)

(deflayer empty-for-reference
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _   _    _   
  _      _    _    _    _    _    _    _    _    _    _    _   _   _ 
  _       _    _    _    _    _    _    _    _    _    _    _      _  
  _        _    _    _    _    _    _    _    _    _    _          _   
  _        _    _             _               _    _    _   _  _   _    
)
(deflayer disabled-for-reference
  XX   XX  XX   XX  XX   XX  XX   XX  XX   XX XX   XX   XX  XX  XX 
  XX    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX XX  
  XX     XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX XX 
  XX      XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX 
  XX       XX   XX   XX   XX   XX   XX   XX   XX   XX   XX       XX  
  XX     XX   XX            XX              XX   XX   XX   XX XX   XX   
)
;; (defalias - (tap-hold-press 200 200 - (layer-while-held numbers-only)))
;; (deflayer numbers-only
;;   _  _    _    _   _    _   _    _   _    _   _    _    _    _   _
;;   grv 1    2    3    4    5    6    7    8    9    0    -    = bspc
;;   _    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX  _
;;   _     XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX      _ 
;;   _      XX   XX   XX   XX   XX   XX   XX   XX   XX   XX          _ 
;;   _      _    _              _              _    _    _   _   _   _
;; )

;; ---------------------------------------------
;; grv on press, lctl on hold

(defalias ` (tap-hold-press 200 200 ` (multi lctl (layer-while-held hold-1))))
(defalias 1 (tap-hold-press 200 200 1 (multi lctl (layer-while-held hold-1))))
(defalias tab (tap-hold-press 200 200 tab (multi lctl (layer-while-held hold-1))))
(defalias 2 (tap-hold-press 200 200 2 (multi lsft (layer-while-held hold-1))))
(defalias 3 (tap-hold-press 200 200 3 (multi nop0 (layer-while-held hold-1) (layer-while-held hold-fn))))
(defalias 6 (tap-hold-press 200 200 6 (multi lmet (layer-while-held hold-1))))

(deflayer hold-1
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _   @tab2 @esc _    _    _    ret  _    _    _ _   
  _      _    _    _    _    _    _    _    _    _    _    _    _ _ 
  _       _    _    _    _    _    _    _    _    _    _    _    _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    _              _              _    _    _    _  _    _    
)
(defalias tab2 (tap-hold-press 200 200 tab (macro⟳↑⤫ tab 200)))

(defalias fn nop0)
(deflayer hold-fn
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    @fn6 _    _    _    _   @fn-  _ _   
  _      @fnQ _    _    @fnR @fnT _    _    _    _    _    _    _ @fn\
  _       _    _    _    _    _    _    _    _    @fnL _    _    _  
  _        _    _    _    _    _    _    _    _    _   @fn/       _   
  _      _    _             sldr            _    _    _    _  _    _    
)

(defalias fnT M-F3) ;; yakuake terminal
(defalias fnR M-spc) ;; albert search
(defalias fnQ lrld) ;; live reload kanata configuration
(defalias fnL (macro sldr l a y o u t -)) ;; change kanata layout. Defined later
(defalias fn\ (macro sldr \)) ;; tex
(defalias fn/ (macro sldr /)) ;; ipa
(defalias fn6 (macro sldr S-6)) ;; superscript
(defalias fn- (macro sldr S--)) ;; subscript

;; esc releases all alternative layouts (declared later)
(deftemplate def-sldr-layout (vk-name1 vk-name2 input-keys output-action)
  (defvirtualkeys $vk-name1 $output-action)
  (defvirtualkeys $vk-name2 (on-press press-vkey $vk-name1))
  (defseq $vk-name2 $input-keys)
)
(template-expand def-sldr-layout layout-g layout--g  (l a y o u t - g  ) (layer-while-held layout-greek)       )
(template-expand def-sldr-layout layout-c layout--c  (l a y o u t - c  ) (layer-while-held layout-mathcal)     )
(template-expand def-sldr-layout layout-b layout--b  (l a y o u t - b  ) (layer-while-held layout-mathbb)      )
(template-expand def-sldr-layout layout-^ layout--^  (l a y o u t - S-6) (layer-while-held layout-superscript) )
(template-expand def-sldr-layout layout-_ layout--_  (l a y o u t - S--) (layer-while-held layout-subscript)   )
(template-expand def-sldr-layout layout-k layout--k  (l a y o u t - k  ) (layer-while-held layout-keyboard)   )
(template-expand def-sldr-layout layout-e layout--e  (l a y o u t - e  ) (layer-while-held layout-emoji)   )
(defvirtualkeys vkey-layouts-release (macro
  ;; release all declared layouts and come to default
  (on-press release-vkey layout-g)
  (on-press release-vkey layout-c)
  (on-press release-vkey layout-b)
  (on-press release-vkey layout-^)
  (on-press release-vkey layout-_)
  (on-press release-vkey layout-e)
  (on-press release-vkey layout-k)
))



;; ---------------------------------------------

;; nop1 is arrows-lock
(deftemplate def-arrow-hold (key tap-if-quickly-followed-by)
  (defalias $key (tap-hold-press 200 200 $key (tap-hold-except-keys 1 1 $key (multi
    (layer-while-held arrows)
    (on-press press-vkey vkey-arrows-on)
    (on-release tap-vkey vkey-arrows-off-unless-locked)
  ) $tap-if-quickly-followed-by)))
)
(template-expand def-arrow-hold = (spc))
(template-expand def-arrow-hold [ (spc ] 0 - 1))

;; (defalias = (tap-hold-press 200 200 = (multi (layer-while-held arrows) (on-press press-vkey vkey-arrows-on) (on-release tap-vkey vkey-arrows-off-unless-locked))) )
;; (defalias [ (tap-hold-press 200 200 [ (multi (layer-while-held arrows) (on-press press-vkey vkey-arrows-on) (on-release tap-vkey vkey-arrows-off-unless-locked))) )

(defvirtualkeys vkey-arrows-on (layer-while-held arrows))
(defvirtualkeys vkey-arrows-lock (multi nop1 (layer-while-held arrows-lock)))
(defvirtualkeys vkey-mouse (layer-while-held mouse))
(defvirtualkeys vkey-scroll (multi (layer-while-held mouse) (layer-while-held scroll)))
(defvirtualkeys vkey-arrows-off (multi
  (on-press release-vkey vkey-arrows-lock)
  (on-press release-vkey vkey-arrows-on)
  (on-press release-vkey vkey-mouse)
  (on-press release-vkey vkey-scroll)
))
(defvirtualkeys vkey-arrows-off-unless-locked (fork (on-press tap-vkey vkey-arrows-off) XX (nop1)))
(defalias arrows-off (on-press tap-vkey vkey-arrows-off))

(deflayer arrows
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _   _    _    esc  _    XX   XX   ret  XX   @=-  _ _   
  _      C-q  C-w  C-e  C-r  C-t  C-y  @bspc @↑   @→   XX   _    _ _ 
  _       C-a  C-s  C-d  C-f  _    XX   @←   @↓   XX   XX   _    _  
  _        C-z  C-x  C-c  C-v  XX   @del XX   XX   XX   C-/      _   
  _      _    _             lsft            @mse _    _    _  _    _    
)
(deflayermap (arrows-lock)
  - @arrows-off
  = @arrows-off
)


(defalias =- (on-press press-vkey vkey-arrows-lock))
(defalias mse (tap-dance-eager 500 (
  (macro (on-press release-vkey vkey-scroll) (on-press press-vkey vkey-mouse))
  (macro (on-press release-vkey vkey-mouse) (on-press press-vkey vkey-scroll))
  )
))


(deflayer mouse
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    🖰3   XX   XX   XX   _    _    _ _   
  _      _    _    _    _    _    XX   XX   @🖱↑  @🖱→  XX   _    _ _ 
  _       _    _    _    _    _    XX   @🖱←  @🖱↓  XX   _    _    _  
  _        _    _    _    _    XX   ‹🖰   🖰›   XX   _    _        _   
  _      _    _             @mse-slow       _    _    _    _  _    _    
)
(defalias
  🖱↑  (🖱accel↑ 5 300 1 10)
  🖱→  (🖱accel→ 5 300 1 10)
  🖱←  (🖱accel← 5 300 1 10)
  🖱↓  (🖱accel↓ 5 300 1 10)
)
(defalias mse-slow (layer-while-held mouse-slow))
(deflayer mouse-slow
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      _    _    _    _    _    _    _    @🖱s↑ @🖱s→ _    _    _ _ 
  _       _    _    _    _    _    _    @🖱s← @🖱s↓ _    _    _    _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(defalias
  🖱s↑  (🖱accel↑ 25 300 1 10)
  🖱s→  (🖱accel→ 25 300 1 10)
  🖱s←  (🖱accel← 25 300 1 10)
  🖱s↓  (🖱accel↓ 25 300 1 10)
)
(defalias scroll-slow (layer-while-held scroll-slow))


(deftemplate  accel-scroll (key-name actual-key)
  (defvirtualkeys $key-name (macro⟳↑⤫ ($actual-key 1 250) 25))
  (defalias $key-name
    (multi
      (macro-release-cancel
        ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 25) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 100) 25 ($actual-key 1 150) 25 ($actual-key 1 150) 25 ($actual-key 1 150) 25 ($actual-key 1 250) 25 ($actual-key 1 250) 25 ($actual-key 1 250) 25 ($actual-key 1 250) 25 ($actual-key 1 250) 25 ($actual-key 1 250) 25 (on-press press-vkey $key-name)
      )
      (on-release release-vkey  $key-name)
    )
  )
)
(template-expand accel-scroll ☸↑ 🖱☸↑)
(template-expand accel-scroll ☸→ 🖱☸→)
(template-expand accel-scroll ☸← 🖱☸←)
(template-expand accel-scroll ☸↓ 🖱☸↓)
(deflayer scroll
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      _    _    _    _    _    _    _    @☸↑  @☸→  _    _    _ _ 
  _       _    _    _    _    _    _    @☸←  @☸↓  _    _    _    _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    _             @scroll-slow    _    _    _    _  _    _    
)
(deftemplate  accel-scroll-slow (key-name actual-key)
  (defvirtualkeys $key-name (macro⟳↑⤫ ($actual-key 1 50) 25))
  (defalias $key-name
    (multi
      (macro-release-cancel
        ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 5) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 10) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 20) 25 ($actual-key 1 30) 25 ($actual-key 1 30) 25 ($actual-key 1 30) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 ($actual-key 1 50) 25 (on-press press-vkey $key-name)
      )
      (on-release release-vkey  $key-name)
    )
  )
)
(template-expand accel-scroll-slow ☸s↑ 🖱☸↑)
(template-expand accel-scroll-slow ☸s→ 🖱☸→)
(template-expand accel-scroll-slow ☸s← 🖱☸←)
(template-expand accel-scroll-slow ☸s↓ 🖱☸↓)
(deflayer scroll-slow
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      _    _    _    _    _    _    _    @☸s↑ @☸s→ _    _    _ _ 
  _       _    _    _    _    _    _    @☸s← @☸s↓ _    _    _    _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)

;; Either there is a bug of a hardware issue when pressing multiple keys (holding three and pressing the fourh): (` = ralt o) works and (` = ralt j) works, but (` = ralt i) and (` = ralt j) don't. The software doesn't detect it at all.

;; ---------------------------------------------


(deflayer layout-qwerty ;; for reference
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣1   🔣2   🔣3   🔣4   🔣5   🔣6   🔣7   🔣8   🔣9   🔣0   🔣-   🔣= _   
  _      🔣q   🔣w   🔣e   🔣r   🔣t   🔣y   🔣u   🔣i   🔣o   🔣p   🔣[   🔣] _ 
  _       🔣a   🔣s   🔣d   🔣f   🔣g   🔣h   🔣j   🔣k   🔣l   🔣;   _    _  
  _        🔣z   🔣x   🔣c   🔣v   🔣b   🔣n   🔣m   🔣,   🔣.   _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-greek
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    @SG  _    _    _    _    _    _    _    _    _    _ _   
  _      🔣ψ   🔣ω   🔣ε   🔣ρ   🔣τ   🔣υ   🔣υ   🔣ι   🔣ο   🔣π   _    _ _ 
  _       🔣α   🔣σ   🔣δ   🔣φ   🔣γ   🔣η   🔣ξ   🔣κ   🔣λ   _    _    _  
  @SG      🔣ζ   🔣χ   🔣ψ   🔣ω   🔣β   🔣ν   🔣μ   _    _    _        @SG 
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SG (layer-while-held layout-greek-upper))
(deflayer layout-greek-upper
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣Ψ   🔣΅   🔣Ε   🔣Ρ   🔣Τ   🔣Υ   🔣Θ   🔣Ι   🔣Ο   🔣Π   _    _ _ 
  _       🔣Α   🔣Σ   🔣Δ   🔣Φ   🔣Γ   🔣Η   🔣Ξ   🔣Κ   🔣Λ   _    _    _  
  _        🔣Ζ   🔣Χ   🔣Ψ   🔣Ω   🔣Β   🔣Ν   🔣Μ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-mathcal
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝓠   🔣𝓦   🔣𝓔   🔣𝓡   🔣𝓣   🔣𝓨   🔣𝓤   🔣𝓘   🔣𝓞   🔣𝓟   _    _ _ 
  _       🔣𝓐   🔣𝓢   🔣𝓓   🔣𝓕   🔣𝓖   🔣𝓗   🔣𝓙   🔣𝓚   🔣𝓛   _    _    _  
  @SC      🔣𝓩   🔣𝓧   🔣𝓒   🔣𝓥   🔣𝓑   🔣𝓝   🔣𝓜   _    _    _        @SC
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SC (layer-while-held layout-mathcal-lower))
(deflayer layout-mathcal-lower
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝓺   🔣𝔀   🔣𝓮   🔣𝓻   🔣𝓽   🔣𝔂   🔣𝓾   🔣𝓲   🔣𝓸   🔣𝓹   _    _ _ 
  _       🔣𝓪   🔣𝓼   🔣𝓭   🔣𝓯   🔣𝓰   🔣𝓱   🔣𝓳   🔣𝓴   🔣𝓵   _    _    _  
  _        🔣𝔃   🔣𝔁   🔣𝓬   🔣𝓿   🔣𝓫   🔣𝓷   🔣𝓶   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-mathbb
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣ℚ   🔣𝕎   🔣𝔼   🔣ℝ   🔣𝕋   🔣𝕐   🔣𝕌   🔣𝕀   🔣𝕆   🔣ℙ   _    _ _ 
  _       🔣𝔸   🔣𝕊   🔣𝔻   🔣𝔽   🔣𝔾   🔣ℍ   🔣𝕁   🔣𝕂   🔣𝕃   _    _    _  
  @SB      🔣ℤ   🔣𝕏   🔣ℂ   🔣𝕍   🔣𝔹   🔣ℕ   🔣𝕄   _    _    _        @SB   
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SB (layer-while-held layout-mathbb-lower))
(deflayer layout-mathbb-lower
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝕢   🔣𝕨   🔣𝕖   🔣𝕣   🔣𝕥   🔣𝕪   🔣𝕦   🔣𝕚   🔣𝕠   🔣𝕡   _    _ _ 
  _       🔣𝕒   🔣𝕤   🔣𝕕   🔣𝕗   🔣𝕘   🔣𝕙   🔣𝕛   🔣𝕜   🔣𝕝   _    _    _  
  _        🔣𝕫   🔣𝕩   🔣𝕔   🔣𝕧   🔣𝕓   🔣𝕟   🔣𝕞   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-superscript
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣¹   🔣²   🔣³   🔣⁴   🔣⁵   🔣⁶   🔣⁷   🔣⁸   🔣⁹   🔣⁰   🔣⁻   🔣⁼ _   
  _      🔣ᑫ   🔣ʷ   🔣ᵉ   🔣ʳ   🔣ᵗ   🔣ʸ   🔣ᵘ   🔣ⁱ   🔣ᵒ   🔣ᵖ   _    _ _ 
  _       🔣ᵃ   🔣ˢ   🔣ᵈ   🔣ᶠ   🔣ᵍ   🔣ʰ   🔣ʲ   🔣ᵏ   🔣ˡ   _    _    _  
  _        🔣ᶻ   🔣ˣ   🔣ᶜ   🔣ᵛ   🔣ᵇ   🔣ⁿ   🔣ᵐ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-subscript
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣₁   🔣₂   🔣₃   🔣₄   🔣₅   🔣₆   🔣₇   🔣₈   🔣₉   🔣₀   _    _ _   
  _      🔣ᵩ   🔣ᵥ   🔣ₑ   🔣ᵣ   🔣ₜ   🔣ᵧ   🔣ᵤ   🔣ᵢ   🔣ₒ   🔣ₚ   _    _ _ 
  _       🔣ₐ   🔣ₛ   🔣ₑ   🔣ᵥ   🔣ᵨ   🔣ₕ   🔣ⱼ   🔣ₖ   🔣ₗ   _    _    _  
  _        🔣ₓ   _    🔣ₒ   🔣ᵥ   🔣ᵦ   🔣ₙ   🔣ₘ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-keyboard
  _  🔣🔇 🔣🔉 🔣🔊 🔣⌨ 🔣🔆 🔣🔅 _  _   _  _   _  _   🔣⎀   🔣⌦  
  _     _    _    _    _    _    _    _    _    _    _   _   _   🔣⌫   
  🔣↹      _    _    _    _    _    _    _    _    _    _   _   _   _ 
  🔣⇪     _    _    _    _    _    _    _    _    _    _   _    🔣⏎  
  🔣⇧      _    _    _    _    _    _    _    _    _    _        🔣⇧   
  🔣☸     🔣❖  🔣⌥             🔣␣               _   🔣☸
  (macro 🔣⇤ 🔣←) (macro 🔣⇞ 🔣↑) (macro 🔣⇟ 🔣↓) (macro 🔣⇥ 🔣→)
)
;; https://home.unicode.org/emoji/emoji-frequency/
 
 
(deflayer layout-emoji
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _    🔣😂 🔣😉 🔣😍 🔣🤣 🔣😊 🔣🙏 🔣💕 🔣😭 🔣😘 _    _   _    _   
  _     🔣❤️   🔣👍 🔣😅 🔣👏 🔣😁 🔣♥️ 🔣🔥 _    _    _    _   _   _ 
  _       🔣💔 🔣💖 🔣💙 🔣😢 🔣🤔 🔣😆 🔣🙄 🔣💪 🔣☺️  _   _      _  
  _        🔣👌 🔣🤗  _    _    _    _    _    _    _    _          _   
  _        _    _             _               _    _    _   🔣👍 🔣👎 _    
)
;; Pending: IPA and emoji layers


;; ---------------------------------------------


(deftemplate def-seq (vk-name input-keys output-action)
  (defvirtualkeys $vk-name $output-action)
  (defseq $vk-name $input-keys)
)

(template-expand def-seq \perp         (\ p e r p                   spc) (unicode ⟂))
(template-expand def-seq \xi           (\ x i                       spc) (unicode ξ))
(template-expand def-seq \omega        (\ o m e g a                 spc) (unicode ω))
(template-expand def-seq \theta        (\ t h e t a                 spc) (unicode θ))
(template-expand def-seq \phi          (\ p h i                     spc) (unicode ϕ))
(template-expand def-seq \sigma        (\ s i g m a                 spc) (unicode σ))
(template-expand def-seq \pi           (\ p i                       spc) (unicode π))
(template-expand def-seq \lambda       (\ l a m b d a               spc) (unicode λ))
(template-expand def-seq \delta        (\ d e l t a                 spc) (unicode δ))
(template-expand def-seq \gamma        (\ g a m m a                 spc) (unicode γ))
(template-expand def-seq \zeta         (\ z e t a                   spc) (unicode ζ))
(template-expand def-seq \chi          (\ c h i                     spc) (unicode χ))
(template-expand def-seq \tau          (\ t a u                     spc) (unicode τ))
(template-expand def-seq \rho          (\ r h o                     spc) (unicode ρ))
(template-expand def-seq \varphi       (\ v a r p h i               spc) (unicode φ))
(template-expand def-seq \nu           (\ n u                       spc) (unicode ν))
(template-expand def-seq \mu           (\ m u                       spc) (unicode μ))
(template-expand def-seq \eta          (\ e t a                     spc) (unicode η))
(template-expand def-seq \kappa        (\ k a p p a                 spc) (unicode κ))
(template-expand def-seq \iota         (\ i o t a                   spc) (unicode ι))
(template-expand def-seq \eps          (\ e p s spc                 spc) (unicode ϵ))
(template-expand def-seq \epsilon      (\ e p s i l o n             spc) (unicode ϵ))
(template-expand def-seq \beta         (\ b e t a                   spc) (unicode β))
(template-expand def-seq \alpha        (\ a l p h a                 spc) (unicode α))
(template-expand def-seq \greek        (\ g r e e k                 spc) (macro 🔣α 🔣β 🔣γ 🔣δ 🔣ε 🔣ϕ 🔣φ 🔣ι 🔣κ 🔣λ 🔣η 🔣μ 🔣ν 🔣ω 🔣π 🔣ρ 🔣σ 🔣τ 🔣χ 🔣ο 🔣ς 🔣υ 🔣ψ 🔣ϐ 🔣ϑ 🔣ϛ 🔣ϝ 🔣ϝ 🔣ϟ 🔣ϟ 🔣ϡ 🔣ϡ 🔣ϰ 🔣ϱ 🔣ϵ 🔣϶ 🔣α 🔣β 🔣ε 🔣ζ 🔣η 🔣ι 🔣κ 🔣μ 🔣ν 🔣ο 🔣τ 🔣υ 🔣χ 🔣ψ 🔣ζ 🔣θ 🔣ξ 🔣γ 🔣δ 🔣λ 🔣π 🔣σ 🔣φ 🔣θ 🔣ω 🔣ξ))
(template-expand def-seq \down         (\ d o w n                   spc) (unicode ↓))
(template-expand def-seq \up           (\ u p                       spc) (unicode ↑ ))
(template-expand def-seq \mapsto       (\ m a p s t o               spc) (unicode ↦))
(template-expand def-seq \rightarrow   (\ r i g h t a r r o w       spc) (unicode →))
(template-expand def-seq \leftarrow    (\ l e f t a r r o w         spc) (unicode ←))
(template-expand def-seq \left         (\ l e f t                   spc) (unicode ←))
(template-expand def-seq \right        (\ r i g h t                 spc) (unicode →))
(template-expand def-seq \to           (\ t o                       spc) (unicode →))
(template-expand def-seq \proportional (\ p r o p o r t i o n a l   spc) (unicode ∝))
(template-expand def-seq \propto       (\ p r o p t o               spc) (unicode ∝))
(template-expand def-seq \prop         (\ p r o p                   spc) (unicode ∝))
(template-expand def-seq \approx       (\ a p p r o x               spc) (unicode ≈))
(template-expand def-seq \neq          (\ n e q                     spc) (unicode ≠))
(template-expand def-seq \eqdef        (\ e q d e f                 spc) (unicode ≝))
(template-expand def-seq \leq          (\ l e q                     spc) (unicode ≤))
(template-expand def-seq \geq          (\ g e q                     spc) (unicode ≥))
(template-expand def-seq \sum          (\ s u m                     spc) (unicode ∑))
(template-expand def-seq \in           (\ i n                       spc) (unicode ∈))
(template-expand def-seq \infty        (\ i n f t y                 spc) (unicode ∞))
(template-expand def-seq \cdots        (\ c d o t s                 spc) (unicode ⋯))
(template-expand def-seq \updelta      (\ u p d e l t a             spc) (unicode δ))
(template-expand def-seq \dag          (\ d a g                     spc) (unicode †))
(template-expand def-seq \rangle       (\ r a n g l e               spc) (unicode 〉))
(template-expand def-seq \langle       (\ l a n g l e               spc) (unicode 〈))
(template-expand def-seq \cala         (\ c a l a                   spc) (unicode 𝓐))
(template-expand def-seq \bba          (\ b b a                     spc) (unicode 𝔸))
(template-expand def-seq \arrows       (\ a r r o w s               spc) (macro  🔣← 🔣↑ 🔣→ 🔣↓ 🔣↔ 🔣↕ 🔣↖ 🔣↘ 🔣↙ 🔣↚ 🔣↛ 🔣↜ 🔣↝ 🔣↞ 🔣↟ 🔣↠ 🔣↡ 🔣↢ 🔣↣ 🔣↤ 🔣↥ 🔣↦ 🔣↧ 🔣↨ 🔣↩ 🔣↯ 🔣↰ 🔣↱ 🔣↲ 🔣↳ 🔣↴ 🔣↵ 🔣↶ 🔣↷ 🔣↸ 🔣↹ 🔣↺ 🔣↻ 🔣↼ 🔣↽ 🔣↾ 🔣↿ 🔣⇀ 🔣⇁ 🔣⇂ 🔣⇃ 🔣⇄ 🔣⇅ 🔣⇆ 🔣⇇ 🔣⇈ 🔣⇉ 🔣⇊ 🔣⇋ 🔣⇌ 🔣⇍ 🔣⇎ 🔣⇏ 🔣⇐ 🔣⇑ 🔣⇒ 🔣⇓ 🔣⇔ 🔣⇕ 🔣⇖ 🔣⇗ 🔣⇘ 🔣⇙ 🔣⇚ 🔣⇛ 🔣⇜ 🔣⇝ 🔣⇞ 🔣⇟ 🔣⇠ 🔣⇡ 🔣⇢ 🔣⇣ 🔣⇤ 🔣⇥ 🔣⇦ 🔣⇧ 🔣⇨ 🔣⇩ 🔣⇪ 🔣⇫ 🔣⇬ 🔣⇭ 🔣⇮ 🔣⇯ 🔣⇰ 🔣⇱ 🔣⇲ 🔣⇳ 🔣⇴ 🔣⇵ 🔣⇶ 🔣⇷ 🔣⇸ 🔣⇹ 🔣⇺ 🔣⇻ 🔣⇼ 🔣⇽ 🔣⇾ 🔣⇿ 🔣☇ 🔣☈ 🔣➘ 🔣➙ 🔣➚ 🔣➛ 🔣➜ 🔣➝ 🔣➞ 🔣➟ 🔣➠ 🔣➡ 🔣➢ 🔣➣ 🔣➤ 🔣➥ 🔣➦ 🔣➧ 🔣➨ 🔣➩ 🔣➪ 🔣➫ 🔣➬ 🔣➭ 🔣➮ 🔣➯ 🔣➱ 🔣➲ 🔣➳ 🔣➴ 🔣➵ 🔣➶ 🔣➷ 🔣➸ 🔣➹ 🔣➺ 🔣➻ 🔣➼ 🔣➽ 🔣➾ 🔣⟰ 🔣⟱ 🔣⟲ 🔣⟳ 🔣⟴ 🔣⟵ 🔣⟶ 🔣⟷ 🔣⟸ 🔣⟹ 🔣⟺ 🔣⟻ 🔣⟼ 🔣⟽ 🔣⟾ 🔣⟿ 🔣⤀ 🔣⤁ 🔣⤂ 🔣⤃ 🔣⤄ 🔣⤅ 🔣⤆ 🔣⤇ 🔣⤈ 🔣⤉ 🔣⤊ 🔣⤋ 🔣⤌ 🔣⤍ 🔣⤎ 🔣⤏ 🔣⤐ 🔣⤑ 🔣⤒ 🔣⤓ 🔣⤔ 🔣⤕ 🔣⤖ 🔣⤗ 🔣⤘ 🔣⤙ 🔣⤚ 🔣⤛ 🔣⤜ 🔣⤝ 🔣⤞ 🔣⤟ 🔣⤠ 🔣⤡ 🔣⤢ 🔣⤣ 🔣⤤ 🔣⤥ 🔣⤦ 🔣⤧ 🔣⤨ 🔣⤩ 🔣⤪ 🔣⤫ 🔣⤬ 🔣⤭ 🔣⤮ 🔣⤯ 🔣⤰ 🔣⤱ 🔣⤲ 🔣⤳ 🔣⤴ 🔣⤵ 🔣⤶ 🔣⤷ 🔣⤸ 🔣⤹ 🔣⤺ 🔣⤻ 🔣⤼ 🔣⤽ 🔣⤾ 🔣⤿ 🔣⥀ 🔣⥁ 🔣⥂ 🔣⥃ 🔣⥄ 🔣⥅ 🔣⥆ 🔣⥇ 🔣⥈ 🔣⥉ 🔣⥊ 🔣⥋ 🔣⥌ 🔣⥍ 🔣⥎ 🔣⥏ 🔣⥐ 🔣⥑ 🔣⥒ 🔣⥓ 🔣⥔ 🔣⥕ 🔣⥖ 🔣⥗ 🔣⥘ 🔣⥙ 🔣⥚ 🔣⥛ 🔣⥜ 🔣⥝ 🔣⥞ 🔣⥟ 🔣⥠ 🔣⥡ 🔣⥢ 🔣⥣ 🔣⥤ 🔣⥥ 🔣⥦ 🔣⥧ 🔣⥨ 🔣⥩ 🔣⥪ 🔣⥫ 🔣⥬ 🔣⥭ 🔣⥮ 🔣⥯ 🔣⥰ 🔣⥱ 🔣⥲ 🔣⥳ 🔣⥴ 🔣⥵ 🔣⥶ 🔣⥷ 🔣⥸ 🔣⥹ 🔣⥺ 🔣⥻ 🔣⥼ 🔣⥽ 🔣⥾ 🔣⥿ 🔣⬀ 🔣⬁ 🔣⬂ 🔣⬃ 🔣⬄ 🔣⬅ 🔣⬆ 🔣⬇ 🔣⬈ 🔣⬉ 🔣⬊ 🔣⬋ 🔣⬌ 🔣⬍ 🔣⬎ 🔣⬏ 🔣⬐ 🔣⬑ 🔣⬰ 🔣⬱ 🔣⬲ 🔣⬳ 🔣⬴ 🔣⬵ 🔣⬶ 🔣⬷ 🔣⬸ 🔣⬹ 🔣⬺ 🔣⬻ 🔣⬼ 🔣⬽ 🔣⬾ 🔣⬿ 🔣⭀ 🔣⭁ 🔣⭂ 🔣⭃ 🔣⭄ 🔣⭅ 🔣⭆ 🔣⭇ 🔣⭈ 🔣⭉ 🔣⭊ 🔣⭋ 🔣⭌ 🔣⭍ 🔣⭎ 🔣⭏ 🔣⭚ 🔣⭛ 🔣⭜ 🔣⭝ 🔣⭞ 🔣⭟ 🔣⭠ 🔣⭡ 🔣⭢ 🔣⭣ 🔣⭤ 🔣⭥ 🔣⭦ 🔣⭧ 🔣⭨ 🔣⭩ 🔣⭪ 🔣⭬ 🔣⭭ 🔣⭮ 🔣⭯ 🔣⭱ 🔣⭲ 🔣⭳ 🔣⭶ 🔣⭷ 🔣⭸ 🔣⭺ 🔣⭻ 🔣⭼ 🔣⭽ 🔣⭾ 🔣⭿ 🔣⮀ 🔣⮁ 🔣⮂ 🔣⮃ 🔣⮄ 🔣⮅ 🔣⮆ 🔣⮇ 🔣⮈ 🔣⮉ 🔣⮊ 🔣⮋ 🔣⮌ 🔣⮍ 🔣⮎ 🔣⮏ 🔣⮐ 🔣⮑ 🔣⮒ 🔣⮓ 🔣⮔ 🔣⮕ 🔣⮗ 🔣⮘ 🔣⮙ 🔣⮚ 🔣⮛ 🔣⮜ 🔣⮝ 🔣⮞ 🔣⮟ 🔣⮠ 🔣⮡ 🔣⮢ 🔣⮣ 🔣⮥ 🔣⮦ 🔣⮧ 🔣⮩ 🔣⮪ 🔣⮫ 🔣⮭ 🔣⮮ 🔣⮯ 🔣⮱ 🔣⮲ 🔣⮴ 🔣⮵ 🔣⮶ 🔣⮷ 🔣⮸ 🔣⮹ 🔣⯬ 🔣⯭ 🔣⯮ 🔣⯯ 🔣🏹 🔣🔙 🔣🔚 🔣🔛 🔣🔜 🔣🔝 🔣🞀 🔣🞁 🔣🞂 🔣🞃 🔣🠀 🔣🠁 🔣🠂 🔣🠃 🔣🠄 🔣🠅 🔣🠆 🔣🠇 🔣🠈 🔣🠉 🔣🠊 🔣🠋 🔣🠐 🔣🠑 🔣🠒 🔣🠓 🔣🠔 🔣🠕 🔣🠖 🔣🠗 🔣🠘 🔣🠙 🔣🠚 🔣🠛 🔣🠜 🔣🠝 🔣🠞 🔣🠟 🔣🠠 🔣🠡 🔣🠢 🔣🠣 🔣🠤 🔣🠥 🔣🠦 🔣🠧 🔣🠨 🔣🠩 🔣🠪 🔣🠫 🔣🠬 🔣🠭 🔣🠮 🔣🠯 🔣🠰 🔣🠱 🔣🠲 🔣🠳 🔣🠵 🔣🠶 🔣🠷 🔣🠸 🔣🠹 🔣🠺 🔣🠼 🔣🠽 🔣🠾 🔣🠿 🔣🡀 🔣🡁 🔣🡂 🔣🡃 🔣🡄 🔣🡅 🔣🡆 🔣🡇 🔣🡐 🔣🡑 🔣🡒 🔣🡓 🔣🡔 🔣🡕 🔣🡖 🔣🡗 🔣🡘 🔣🡙 🔣🡠 🔣🡡 🔣🡢 🔣🡣 🔣🡤 🔣🡥 🔣🡦 🔣🡧 🔣🡨 🔣🡩 🔣🡪 🔣🡫 🔣🡬 🔣🡭 🔣🡮 🔣🡯 🔣🡰 🔣🡱 🔣🡲 🔣🡳 🔣🡴 🔣🡵 🔣🡶 🔣🡷 🔣🡸 🔣🡹 🔣🡺 🔣🡻 🔣🡼 🔣🡽 🔣🡾 🔣🡿 🔣🢀 🔣🢁 🔣🢂 🔣🢃 🔣🢄 🔣🢅 🔣🢆 🔣🢇 🔣🢐 🔣🢑 🔣🢒 🔣🢓 🔣🢔 🔣🢕 🔣🢖 🔣🢗 🔣🢘 🔣🢙 🔣🢚 🔣🢛 🔣🢜 🔣🢝 🔣🢞 🔣🢟 🔣🢠 🔣🢡 🔣🢢 🔣🢣 🔣🢤 🔣🢥 🔣🢦 🔣🢧 🔣🢨 🔣🢩 🔣🢪 🔣🢫 🔣🢬 🔣🢭 🔣🢰 🔣🢱))
(template-expand def-seq \calb         (\ c a l b                   spc) (unicode 𝓑))
(template-expand def-seq \calc         (\ c a l c                   spc) (unicode 𝓒))
(template-expand def-seq \cald         (\ c a l d                   spc) (unicode 𝓓))
(template-expand def-seq \cale         (\ c a l e                   spc) (unicode 𝓔))
(template-expand def-seq \bbe          (\ b b e                     spc) (unicode 𝔼))
(template-expand def-seq \calf         (\ c a l f                   spc) (unicode 𝓕))
(template-expand def-seq \calg         (\ c a l g                   spc) (unicode 𝓖))
(template-expand def-seq \calh         (\ c a l h                   spc) (unicode 𝓗))
(template-expand def-seq \call         (\ c a l l                   spc) (unicode 𝓛))
(template-expand def-seq \calm         (\ c a l m                   spc) (unicode 𝓜))
(template-expand def-seq \caln         (\ c a l n                   spc) (unicode 𝓝))
(template-expand def-seq \bbn          (\ b b n                     spc) (unicode ℕ))
(template-expand def-seq \calp         (\ c a l p                   spc) (unicode 𝓟))
(template-expand def-seq \bbp          (\ b b p                     spc) (unicode ℙ))
(template-expand def-seq \calq         (\ c a l q                   spc) (unicode 𝓠))
(template-expand def-seq \bbq          (\ b b q                     spc) (unicode ℚ))
(template-expand def-seq \calr         (\ c a l r                   spc) (unicode 𝓡))
(template-expand def-seq \bbr          (\ b b r                     spc) (unicode ℝ))
(template-expand def-seq \calu         (\ c a l u                   spc) (unicode 𝓤))
(template-expand def-seq \calw         (\ c a l w                   spc) (unicode 𝓦))
(template-expand def-seq \calx         (\ c a l x                   spc) (unicode 𝓧))
(template-expand def-seq \caly         (\ c a l y                   spc) (unicode 𝓨))
(template-expand def-seq \calz         (\ c a l z                   spc) (unicode 𝓩))
(template-expand def-seq \parallel     (\ p a r a l l e l           spc) (unicode ∥))
(template-expand def-seq \norm         (\ n o r m                   spc) (macro 🔣‖ 🔣· 🔣‖))
(template-expand def-seq \noteq        (\ n o t e q                 spc) (unicode ≠))
(template-expand def-seq \cdot         (\ c d o t                   spc) (unicode ·))
(template-expand def-seq \bbone        (\ b b o n e                 spc) (unicode 𝟙))
(template-expand def-seq \rr           (\ r r                       spc) (unicode ≫))
(template-expand def-seq \ll           (\ l l                       spc) (unicode ≪))
(template-expand def-seq \equiv        (\ e q u i v                 spc) (unicode ≡))
(template-expand def-seq \isomorphic   (\ i s o m o r p h i c       spc) (unicode ≌))
(template-expand def-seq \entails      (\ e n t a i l s             spc) (macro 🔣⊢ 🔣⊦ 🔣⊧ 🔣⊨))
(template-expand def-seq \minusplus    (\ m i n u s p l u s         spc) (unicode ∓))
(template-expand def-seq \circ         (\ c i r c                   spc) (unicode ∘))
(template-expand def-seq \play         (\ p l a y                   spc) (unicode ⊳))
(template-expand def-seq \then         (\ t h e n                   spc) (unicode ⊳))
(template-expand def-seq \bot          (\ b o t                     spc) (unicode ⊥))
(template-expand def-seq \top          (\ t o p                     spc) (unicode ⊤))
(template-expand def-seq \oplus        (\ o p l u s                 spc) (unicode ⊕))
(template-expand def-seq \times        (\ t i m e s                 spc) (unicode ×))
(template-expand def-seq \transpose    (\ t r a n s p o s e         spc) (unicode ᵀ))
(template-expand def-seq \bullet       (\ b u l l e t               spc) (unicode •))
(template-expand def-seq \normal       (\ n o r m a l               spc) (macro 🔣~ 🔣𝓝 \( 🔣μ 🔣, spc 🔣σ 🔣² \) ))
(template-expand def-seq \prod         (\ p r o d                   spc) (unicode π))
(template-expand def-seq \sqrt3        (\ s q r t 3                 spc) (unicode ∛))
(template-expand def-seq \sqrt         (\ s q r t                   spc) (unicode √))
(template-expand def-seq \uomega       (\ u o m e g a               spc) (unicode ω))
(template-expand def-seq \ulambda      (\ u l a m b d a             spc) (unicode λ))
(template-expand def-seq \upi          (\ u p i                     spc) (unicode ∏))
(template-expand def-seq \usigma       (\ u s i g m a               spc) (unicode ∑))
(template-expand def-seq \udelta       (\ u d e l t a               spc) (unicode δ))
(template-expand def-seq \ugamma       (\ u g a m m a               spc) (unicode γ))
(template-expand def-seq \over         (\ o v e r                   spc) (unicode ⁄))
(template-expand def-seq \frac         (\ f r a c                   spc) (unicode ⁄))
(template-expand def-seq \varepsilon   (\ v a r e p s i l o n       spc) (unicode ε))
(template-expand def-seq \nxn          (\ n x n                     spc) (macro 🔣n 🔣× 🔣n))
(template-expand def-seq \mxn          (\ m x n                     spc) (macro 🔣m 🔣× 🔣n))
(template-expand def-seq \notparallel  (\ n o t p a r a l l e l     spc) (unicode ∦))
(template-expand def-seq \nparallel    (\ n p a r a l l e l         spc) (unicode ∦))
(template-expand def-seq \notsubseteq  (\ n o t s u b s e t e q     spc) (unicode ⊈))
(template-expand def-seq \supseteq     (\ s u p s e t e q           spc) (unicode ⊇))
(template-expand def-seq \subseteq     (\ s u b s e t e q           spc) (unicode ⊆))
(template-expand def-seq \notsupset    (\ n o t s u p s e t         spc) (unicode ⊅))
(template-expand def-seq \notsubset    (\ n o t s u b s e t         spc) (unicode ⊄))
(template-expand def-seq \supset       (\ s u p s e t               spc) (unicode ⊃))
(template-expand def-seq \subset       (\ s u b s e t               spc) (unicode ⊂))
(template-expand def-seq \notsupseteq  (\ n o t s u p s e t e q     spc) (unicode ⊉))
(template-expand def-seq \coloneq      (\ c o l o n e q             spc) (unicode ≔))
(template-expand def-seq \:=           (\ S-; =                     spc) (unicode ≔))
(template-expand def-seq \ne           (\ n e                       spc) (unicode ≠))
(template-expand def-seq \dash         (\ d a s h                   spc) (unicode —))
(template-expand def-seq \emdash       (\ e m d a s h               spc) (unicode —))
(template-expand def-seq \em           (\ e m                       spc) (unicode —))
(template-expand def-seq \grad         (\ g r a d                   spc) (unicode ∇))
(template-expand def-seq \nabla        (\ n a b l a                 spc) (unicode ∇))
(template-expand def-seq ==>           (= = S-,                     spc) (unicode ⇒))
(template-expand def-seq 2/3           (2 / 3                       spc) (unicode ⅔))
(template-expand def-seq tm            (t m                         spc) (unicode ™))
(template-expand def-seq 7/8           (7 / 8                       spc) (unicode ⅞))
(template-expand def-seq 5/6           (5 / 6                       spc) (unicode ⅚))
(template-expand def-seq 5/8           (5 / 8                       spc) (unicode ⅝))
(template-expand def-seq 3/5           (3 / 5                       spc) (unicode ⅗))
(template-expand def-seq 3/4           (3 / 4                       spc) (unicode ¾))
(template-expand def-seq <==           (S-, = =                     spc) (unicode ⇐))
(template-expand def-seq 2/5           (2 / 5                       spc) (unicode ⅖))
(template-expand def-seq <=>           (S-, = S-.                   spc) (unicode ⇔))
(template-expand def-seq 3/8           (3 / 8                       spc) (unicode ⅜))
(template-expand def-seq 4/5           (4 / 5                       spc) (unicode ⅘))
(template-expand def-seq -->           (- - S-.                     spc) (unicode →))
(template-expand def-seq ...           (. . .                       spc) (unicode …))
(template-expand def-seq <--           (S-, - -                     spc) (unicode ←))
(template-expand def-seq 1/6           (1 / 6                       spc) (unicode ⅙))
(template-expand def-seq 1/8           (1 / 8                       spc) (unicode ⅛))
(template-expand def-seq 1/3           (1 / 3                       spc) (unicode ⅓))
(template-expand def-seq 1/2           (1 / 2                       spc) (unicode ½))
(template-expand def-seq c/o           (c / o                       spc) (unicode ℅))
(template-expand def-seq 1/5           (1 / 5                       spc) (unicode ⅕))
(template-expand def-seq 1/4           (1 / 4                       spc) (unicode ¼))
(template-expand def-seq =:            (= S-;                       spc) (unicode ≕))
(template-expand def-seq ^t            (S-6 t                       spc) (unicode ᵀ))
(template-expand def-seq ^T            (S-6 S-t                     spc) (unicode ᵀ))
(template-expand def-seq ^{-1}         (S-6 { - 1 }                 spc) (macro 🔣⁻🔣¹))
(template-expand def-seq ^-1           (S-6 - 1                     spc) (macro 🔣⁻🔣¹))
(template-expand def-seq ^+            (S-6 S-=                     spc) (unicode ⁺))
(template-expand def-seq /dzh          (/ d z h                     spc) (macro 🔣d͡ 🔣ʒ))
(template-expand def-seq /tsh          (/ t s h                     spc) (macro 🔣t͡ 🔣ʃ))
(template-expand def-seq /darkl        (/ d a r k l                 spc) (unicode ɫ))
(template-expand def-seq ^w            (S-6 w                       spc) (unicode ʷ))
(template-expand def-seq ^j            (S-6 j                       spc) (unicode ʲ))
(template-expand def-seq ^h            (S-6 h                       spc) (unicode ʰ))
(template-expand def-seq /--           (/ - -                       spc) (unicode ʔ))
(template-expand def-seq /jh           (/ j h                       spc) (unicode ʝ))
(template-expand def-seq /nh           (/ n h                       spc) (unicode ɳ))
(template-expand def-seq /ñ            (/ RA-n                      spc) (unicode ɲ))
(template-expand def-seq /zh           (/ z h                       spc) (unicode ʒ))
(template-expand def-seq /6            (/ 6                         spc) (unicode ɕ))
(template-expand def-seq /r            (/ r                         spc) (unicode ɾ))
(template-expand def-seq /rh           (/ r h                       spc) (unicode ɹ))
(template-expand def-seq /rr           (/ r r                       spc) (unicode ʁ))
(template-expand def-seq /gh           (/ g h                       spc) (unicode ɣ))
(template-expand def-seq /ng           (/ n g                       spc) (unicode ŋ))
(template-expand def-seq /bh           (/ b h                       spc) (unicode β))
(template-expand def-seq /dh           (/ d h                       spc) (unicode ð))
(template-expand def-seq /th           (/ t h                       spc) (unicode θ))
(template-expand def-seq /sh           (/ s h                       spc) (unicode ʃ))
(template-expand def-seq /kh           (/ k h                       spc) (unicode χ))
(template-expand def-seq /lh           (/ l h                       spc) (unicode ʎ))
(template-expand def-seq /oe           (/ o e                       spc) (unicode œ))
(template-expand def-seq /ae           (/ a e                       spc) (unicode æ))
;; (template-expand def-seq /ỳ            (/ ỳ                         spc) (unicode ʏ))
;; (template-expand def-seq /ä            (/ ä                         spc) (unicode æ))
;; (template-expand def-seq /à            (/ à                         spc) (unicode ʌ))
;; (template-expand def-seq /ò            (/ ò                         spc) (unicode ɔ))
;; (template-expand def-seq /è            (/ è                         spc) (unicode ɜ))
;; (template-expand def-seq /ö            (/ ö                         spc) (unicode ø))
;; (template-expand def-seq /ì            (/ ì                         spc) (unicode ɪ))
;; (template-expand def-seq /ù            (/ ù                         spc) (unicode ʊ))
;; (template-expand def-seq /ô            (/ ô                         spc) (unicode ɒ))
;; (template-expand def-seq /e            (/ e                         spc) (unicode ə))
;; (template-expand def-seq /â            (/ â                         spc) (unicode ɑ))
(template-expand def-seq _i=1..        (S-- i = 1 . .               spc) (macro 🔣ᵢ 🔣₌ 🔣₁ 🔣₂ 🔣. 🔣. 🔣ₙ 🔣ₘ))
(template-expand def-seq _=            (S-- =                       spc) (unicode ₌))
(template-expand def-seq _x            (S-- x                       spc) (unicode ₓ))
(template-expand def-seq ^k            (S-6 k                       spc) (unicode ᵏ))
(template-expand def-seq _k            (S-- k                       spc) (unicode ₖ))
(template-expand def-seq _j            (S-- j                       spc) (unicode ⱼ))
(template-expand def-seq _1..m         (S-- 1 . . m                 spc) (macro 🔣₁ 🔣. 🔣. 🔣ₘ))
(template-expand def-seq _m            (S-- m                       spc) (unicode ₘ))
(template-expand def-seq _n            (S-- n                       spc) (unicode ₙ))
(template-expand def-seq ^d            (S-6 d                       spc) (unicode ᵈ))
(template-expand def-seq ^m            (S-6 m                       spc) (unicode ᵐ))
(template-expand def-seq ^i            (S-6 i                       spc) (unicode ⁱ))
(template-expand def-seq ^n            (S-6 n                       spc) (unicode ⁿ))
(template-expand def-seq _0            (S-- 0                       spc) (unicode ₀))
(template-expand def-seq _1            (S-- 1                       spc) (unicode ₁))
(template-expand def-seq _i            (S-- i                       spc) (unicode ᵢ))
(template-expand def-seq _1..n         (S-- 1 . . n                 spc) (macro 🔣₁ 🔣. 🔣. 🔣ₙ))
(template-expand def-seq ^2            (S-6 2                       spc) (unicode ²))
(template-expand def-seq 1/n           (1 / n                       spc) (macro 🔣¹ 🔣⁄ 🔣ₙ))
(template-expand def-seq ,...,         (, . . . ,                   spc) (macro 🔣, 🔣… 🔣,))
(template-expand def-seq ,...          (, . . .                     spc) (macro 🔣, 🔣…))
(template-expand def-seq +...+         (S-= . . . S-=               spc) (macro 🔣+ 🔣⋯ 🔣+))
(template-expand def-seq ...+          (. . . S-=                   spc) (macro 🔣⋯ 🔣+))
(template-expand def-seq ...,          (. . . ,                     spc) (macro 🔣… 🔣,))
(template-expand def-seq 1/            (1 /                         spc) (macro 🔣¹ 🔣⁄))
(template-expand def-seq 2/            (2 /                         spc) (macro 🔣² 🔣⁄))
(template-expand def-seq _123          (S-- 1 2 3                   spc) (macro 🔣₁ 🔣₂ 🔣₃ 🔣₄ 🔣₅ 🔣₆ 🔣₇ 🔣₈ 🔣₉ 🔣₀))
(template-expand def-seq ^123          (S-6 1 2 3                   spc) (macro 🔣¹ 🔣² 🔣³ 🔣⁴ 🔣⁵ 🔣⁶ 🔣⁷ 🔣⁸ 🔣⁹ 🔣⁰))
;; (defvirtualkeys
;;   ;;\superscripts (unicode latin letters:   superscripts: ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁰   subscripts: ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₀   modifiers: ̂ ̃ ̄ ̈ ̧ ̆ ̇ ̃ ̉ ̌ ̨ ̷ ̳  greek letters:   superscripts: ᵝ ᵞ ᵟ ᵋ ᶿ   subscripts: ₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉   modifiers: ̂ ̃ ̄ ̈ ̧ ̆ ̇ ̃ ̉ ̌ ̨ ̷ ̳)
;; 
(template-expand def-seq [Y]   ( S-9 y S-0    ) 🔣👍  ) ;; Thumbs Up 
(template-expand def-seq [Y]2  ( sft 9 y 0    ) 🔣👍  ) ;; Thumbs Up 
(template-expand def-seq [N]   ( S-9 n S-0    ) 🔣👎  ) ;; Thumbs Down 
(template-expand def-seq [N]2  ( sft 9 n 0    ) 🔣👎  ) ;; Thumbs Down 
(template-expand def-seq :]    ( S-; S-0      ) 🔣😊  ) ;; Smile 
(template-expand def-seq :]2   ( sft ; 0      ) 🔣😊  ) ;; Smile 
(template-expand def-seq :[    ( S-; S-9      ) 🔣☹️  ) ;; Sad 
(template-expand def-seq :[2   ( sft ; 9      ) 🔣☹️  ) ;; Sad 
(template-expand def-seq ;]    ( ; S-0        ) 🔣😉  ) ;; Wink 
(template-expand def-seq :D    ( S-; d        ) 🔣😃  ) ;; Laugh 
(template-expand def-seq :P    ( S-; p        ) 🔣😛  ) ;; Tongue Out 
(template-expand def-seq [A]   ( S-9 a S-0    ) 🔣😇  ) ;; Angel 
(template-expand def-seq [A]2  ( sft 9 a 0    ) 🔣😇  ) ;; Angel 
(template-expand def-seq :'[   ( S-; ' S-9    ) 🔣😢  ) ;; Cry 
(template-expand def-seq >:[   ( S-. S-; S-9  ) 🔣😡  ) ;; Angry 
(template-expand def-seq >:[2  ( sft . ; 9    ) 🔣😡  ) ;; Angry 
(template-expand def-seq B-]   ( b - S-0      ) 🔣😎  ) ;; Cool 
(template-expand def-seq ;P    ( ; p          ) 🔣😜  ) ;; Stuck Out Tongue Winking Eye 
(template-expand def-seq |-]   ( S-\ - S-0    ) 🔣😴  ) ;; Sleepy 
(template-expand def-seq think  (t h i n k      ) 🔣🤔)
(template-expand def-seq monkey (m o n k e y    ) (macro 🔣🙈️ 🔣🙊️ 🔣🙉️ 🔣🐵️))
(template-expand def-seq ok     (o k            ) 🔣👌)
(template-expand def-seq haha   (h a h a        ) (macro 🔣😂 🔣🤣))
