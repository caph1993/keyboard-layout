(defcfg
  danger-enable-cmd yes
  movemouse-inherit-accel-state yes
  movemouse-smooth-diagonals yes
  sequence-input-mode visible-backspaced ;; shows the sequence as it is typed
  ;; sequence-input-mode hidden-delay-type ;; hides while typing. Outputs if invalid
  sequence-timeout 8000 ;; 8 seconds maximum between key presses in sldr sequence
)
(defsrc
  esc  f1  f2   f3  f4   f5  f6   f7  f8   f9 f10  f11  f12 ins del
  grv   1    2    3    4    5    6    7    8    9    0    -    = bspc
  tab    q    w    e    r    t    y    u    i    o    p    [    ] \ 
  caps    a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft     z    x    c    v    b    n    m    ,    .    /        rsft
  lctl   lmet lalt          spc             ralt rctl left up down right
)

;; My natural right hand position when typing text is the following:
;; index finger on the joint (J,N,M)
;; middle finger on the (I)
;; anular finger on the (O)
;; pinky finger on the ([)
;; thumb finger on the laptop, below (ralt) and unable to reach it comfortably, but with the tip over the (space bar)

;; My natural right hand position when typing text is the following:
;; index finger on (f)
;; middle finger on the joint (r,4)
;; anular finger on the joint (3,e)
;; pinky finger on the joint (1,tab,q)
;; thumb finger symmetric to the left, below (lalt) unable to reach it comfortably, but with the tip over the (space bar)

;; jiko
;; erdf
;; 
;; Activate with (q hold then w) deactivate with (q)
;; Activate with ([ hold then p) deactivate with ([)
;; backspace with (t) and (u), with the thumb
;; ctrl with (space bar), with the thumb
;; alt with (lalt) and (ralt), with the thumb
;; @fn with (rctl) and (super) with the thumb
;; 
;; shift with (w) and (p), with the pinky
;; tab with (g) and (h)
;; 
;; @enter_navigation with (b)
;; Shortcuts ctrl c v x z y.

;; New ideas (2024-08-03):
;; arrows and mouse will be separated conceptually, but mouse and scroll will be together.
;; caps will only activate mouse functionality and the number 3 will activate arrows.
;; locking functionality only for: arrows-lock and mouse-lock. scroll lock is not needed and adds complexity.
;; unlocking unlocks all locks
;; hold caps will hold the mouse layer
;; hold [, hold = and hold 3 will hold the arrows layer
;; tap caps, tap [, tap = and tap 3 will exit all layers if any is active. If not, [, = and 3 will tap the corresponding key. To tap caps, fn caps is needed.
;; double tap caps locks the mouse layer. tap caps unlocks it.
;; double tap ralt locks the mouse layer. tap ralt unlocks it.
;; scroll can be accessed by holding [ in mouse mode. tapping [ will not produce anything.
;; finally, arrows can be locked by taping - or p immediately after holding 3, = or [.

;; (deflayer main
;;   @esc _   _    _   _    _   _    _   _    _  _    _    _   _   @del 
;;   @`    _    @2   @3   _    _    @6   _    _    _    _    _    @= @bspc 
;;   @tab   _    _    _    _    _    _    _    _    _    _    @[   _ _ 
;;   @caps   _    _    _    _    _    _    _    _    _    _    _    _  
;;   _        _    _    _    _    _    _    _    _    _    _        _   
;;   _      _    @lalt         _               _    _    @←   @↑ @↓   @→   
;; )

(deflayer main
  @esc  f1 f2   f3  f4   f5  f6   f7  f8   f9 f10  f11  f12 ins del
  `     1    2    3    4    5    6    7    8    9    0    -    = bspc
  @tab   q    w    e    r    t    y    u    i    o    p    [   @]  \ 
  @caps  a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft     z    x    c    v    b    n    m    ,    .    /        rsft
  lctl   @alt* @ctl*        spc             ralt  rctl @←  @↑ @↓   @→
)
(defalias esc  (multi esc (on-press tap-vkey L0) )) ;; tap esc to exit custom layouts
(defalias lmet (tap-dance 200 ((tap-hold-press 200 200 XX lmet) lmet))) ;; hold or tap twice to activate. Single tap is disabled


;; Invert ctrl and tab, except for alt tab and alt F4
(defalias ctl* (tap-dance-eager 200 (
  (multi lctl      (layer-while-held alt-tab) (on-release release-vkey alt-tab))
  (multi lctl lsft (layer-while-held alt-tab) (on-release release-vkey alt-tab))
)))
(deflayermap (alt-tab)
  tab (multi lalt (unmod (lctl) tab) (on-press press-vkey alt-tab))
  F4 (multi lalt (unmod (lctl) F4))
)
(defvirtualkeys alt-tab lalt)

(defalias alt* (tap-dance-eager 200 (
  (multi lalt (layer-while-held ctl-tab) (on-release release-vkey ctl-tab))
  (tap-hold-press 200 200 XX lmet)
)))
(deflayermap (ctl-tab) tab (multi lctl (unmod (lalt) tab) (on-press press-vkey ctl-tab)))
(defvirtualkeys ctl-tab lctl)

;; Reference layers for copy-paste
(deflayer empty
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      _    _    _    _    _    _    _    _    _    _    _    _ _ 
  _       _    _    _    _    _    _    _    _    _    _    _    _  
  _        _    _    _    _    _    _    _    _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer disabled
  XX   XX  XX   XX  XX   XX  XX   XX  XX   XX XX   XX   XX  XX  XX 
  XX    XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX XX  
  XX     XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX XX 
  XX      XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX   XX 
  XX       XX   XX   XX   XX   XX   XX   XX   XX   XX   XX       XX  
  XX     XX   XX            XX              XX   XX   XX   XX XX   XX   
)
;; Tip. Use: (multi (layer-while-held disabled) (layer-while-held some-layer)) to block all keys but those defined in some-layer


;; ----------------------------------------------------------
;; Custom layouts and sldr commands (mostly TeX)
;; ----------------------------------------------------------

;; Dummy layer to show sldr icon in kanata-tray
(deflayermap (sldr-empty-layer))
(defvirtualkeys sldr-tray-on (layer-while-held sldr-empty-layer))
(defvirtualkeys sldr-tray-off (on-press release-vkey sldr-tray-on))
(defalias sldr-tray (multi
  (on-press press-vkey sldr-tray-on)
  (on-idle 1 tap-vkey sldr-tray-off)
))

;; (defalias IPA (on-press press-vkey vkey-layouts))
;; (defalias esc-IPA (on-press release-vkey vkey-layouts))
;; (defvirtualkeys vkey-layouts (layer-while-held layout-IPA))

;; ----------------------------------------------------------
;; Mouse layer
;; ----------------------------------------------------------

(deftemplate  def-accel (key-name actual-key delay-1 delay-2 delay-3 delay-4 delay-*)
  (defvirtualkeys $key-name (macro⟳↑⤫ ($actual-key 1 $delay-*) 25))
  (defalias $key-name
    (multi
      (macro-release-cancel
        ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25
        ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25
        ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25 ($actual-key 1 $delay-1) 25
        ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25
        ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25
        ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25 ($actual-key 1 $delay-2) 25
        ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25
        ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25
        ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25 ($actual-key 1 $delay-3) 25
        ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25
        ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25
        ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25 ($actual-key 1 $delay-4) 25
        (on-press press-vkey $key-name) ;; this repeats delay-* forever
      )
      (on-release release-vkey  $key-name)
    )
  )
)
;; Mouse movements (normal and slow)
;; (template-expand def-accel  🖱↑n   🖱↑   50 150 400 1500 2500)
;; (template-expand def-accel  🖱→n   🖱→   50 150 400 1500 2500)
;; (template-expand def-accel  🖱←n   🖱←   50 150 400 1500 2500)
;; (template-expand def-accel  🖱↓n   🖱↓   50 150 400 1500 2500)
(defalias
  🖱↑n  (🖱accel↑ 5 300 1 10)
  🖱→n  (🖱accel→ 5 300 1 10)
  🖱←n  (🖱accel← 5 300 1 10)
  🖱↓n  (🖱accel↓ 5 300 1 10)
  🖱↑s  (🖱accel↑ 25 300 1 10)
  🖱→s  (🖱accel→ 25 300 1 10)
  🖱←s  (🖱accel← 25 300 1 10)
  🖱↓s  (🖱accel↓ 25 300 1 10)
  🖱↑ (fork @🖱↑n @🖱↑s (nop2))
  🖱→ (fork @🖱→n @🖱→s (nop2))
  🖱← (fork @🖱←n @🖱←s (nop2))
  🖱↓ (fork @🖱↓n @🖱↓s (nop2))
)
;; Scrollwheel movements (normal and slow)
(template-expand def-accel  ☸↑n   🖱☸↑   5 15 40 150 250)
(template-expand def-accel  ☸→n   🖱☸→   5 15 40 150 250)
(template-expand def-accel  ☸←n   🖱☸←   5 15 40 150 250)
(template-expand def-accel  ☸↓n   🖱☸↓   5 15 40 150 250)
(template-expand def-accel  ☸↑s   🖱☸↑   5 10 20 30 50)
(template-expand def-accel  ☸→s   🖱☸→   5 10 20 30 50)
(template-expand def-accel  ☸←s   🖱☸←   5 10 20 30 50)
(template-expand def-accel  ☸↓s   🖱☸↓   5 10 20 30 50)

(defalias
  ☸↑ (fork @☸↑n @☸↑s (nop2))
  ☸→ (fork @☸→n @☸→s (nop2))
  ☸← (fork @☸←n @☸←s (nop2))
  ☸↓ (fork @☸↓n @☸↓s (nop2))
)

;; ----------------------------------------------------------
;; Tab and arrows layer
;; ----------------------------------------------------------

(defalias holdTab (multi lctl (layer-while-held num-mods) (layer-while-held tab-mods)))
(defalias tapTab tab)
(defalias tab (tap-hold-press 200 200 @tapTab @holdTab))
(deflayermap (tab-mods) ` S-tab  1  tab)

(defalias 🖰🖰   (multi nop1 (on-press press-vkey 🖰🖰)))
(defvirtualkeys 🖰🖰 nop1)

(defalias arrows-extra (multi (layer-while-held num-mods) (on-release release-vkey 🖰🖰)))

(defalias arrows] (multi @arrows-extra (layer-while-held arrows])  (on-release release-vkey 🖰🖰)))

;; defalias ] (tap-hold-press 200 200 ] @arrows]))
(defalias ] (tap-dance 200 (
  (tap-hold-press 200 200 ] (multi @arrows] (fork XX nop1 (ralt))))
  (tap-hold-press 200 200 (macro ] ]) (multi lsft (multi @arrows] (fork XX nop1 (ralt)))))
)))
(defalias caps (tap-dance-eager 200 (
  @arrows]
  (tap-hold-press 200 200 caps (multi lsft @arrows]))
)))

(defalias \ \)
(defalias \sldr (multi @sldr-tray (macro (unicode /) 150 bspc sldr 5 \)))

(deflayermap (num-mods)
  ;; 2 lsft   3 lctl  4 @<=>
  9 (multi sft (unmod (ctl) 9))
  0 (multi sft (unmod (ctl) 0))
  f1 @L↔
  ;; f9 @IPA
  f11 (multi @sldr-tray sldr)
  f12 lrld
)
;; (deflayermap (F-actions)
;;   f1 (unmod 🔇)  f2 (unmod 🔉)  f3 (unmod 🔊)  f5 (unmod ⌨💡+)
;;   f6 (unmod 🔅)  f7 (unmod 🔆)
;; )

(deflayer arrows]
  _   _   _    _   _    _   _    _   _     _  _    _    _      _   @del
  _     _     _     _    _    _     _    _     _     _    _     _  @🖰🖰 @bspc
  _       C-q  C-w  C-e  C-r  C-t   @Cbspc @bspc @↑   @→   @C→   XX  ] @\sldr
  _        C-a  C-s  C-d   C-f  C-g  @C←   @←    @↓   @del  @Cdel XX   C-ret
  _         C-z  C-x  C-c   C-v  XX   @btn1 @btn2 XX   XX    C-/           _
  _            _    _               _              @<=>  _    _   _   _   _
)

;; nop0 is the "go to extreme" button <=>l
;; nop3 is a "ctl" button. All ctl buttons trigger nop3, except the tab key for which certain keys are unmoded.
;; Repeated arrow means ctrl+arrow (word jump). Only defined for left and right.

(defalias <=>  (multi nop0))
(defalias ←    (fork (fork left  home   (nop0)) (fork   @🖱←   @☸←   (nop0))   (nop1)))
(defalias ↑    (fork (fork up    pgup   (nop0)) (fork   @🖱↑   @☸↑   (nop0))   (nop1)))
(defalias ↓    (fork (fork down  pgdn   (nop0)) (fork   @🖱↓   @☸↓   (nop0))   (nop1)))
(defalias →    (fork (fork right end    (nop0)) (fork   @🖱→   @☸→   (nop0))   (nop1)))
(defalias C←   (fork (fork C-left (unmod (lctl rctl) home) (lctl rctl ctl nop0)) XX (nop1)))
(defalias C→   (fork (fork C-right (unmod (lctl rctl) end) (lctl rctl ctl nop0)) XX (nop1)))
(defalias btn1 (fork ret 🖰1   (nop1)))
(defalias btn2 (fork esc 🖰2   (nop1)))
(defalias btn3 (fork esc 🖰3   (nop1)))
(defalias bspc (fork bspc (macro S-home (unmod bspc)) (nop0)))
(defalias del  (fork del  (macro S-end  (unmod del )) (nop0)))
(defalias Cbspc (fork (fork C-bspc (macro S-home (unmod bspc)) (nop0)) XX (nop1)))
(defalias Cdel  (fork (fork C-del  (macro S-home (unmod del )) (nop0)) XX (nop1)))


;; Either there is a bug of a hardware issue when pressing multiple keys (holding three and pressing the fourh): (` = ralt o) works and (` = ralt j) works, but (` = ralt i) and (` = ralt j) don't. The software doesn't detect it at all.

;; ---------------------------------------------
;; Missing IPA layout and I should have a simpler method:
;; Numbers hold layout

(defalias L↔
(tap-dance-eager 3000 (
  (multi (macro 🔣a 🔣b 🔣c          )    (on↑ tap-vkey L0)  )
  (multi (macro ⌫ ⌫ ⌫ 🔣ɪ 🔣p 🔣ɑ)    (on↓ tap-vkey L0)  (on↑ press-vkey L1))
  (multi (macro ⌫ ⌫ ⌫ 🔣α 🔣β 🔣γ)    (on↓ tap-vkey L0)  (on↑ press-vkey L2))
  (multi (macro ⌫ ⌫ ⌫ 🔣😁 🔣👍 🔣👏) (on↓ tap-vkey L0)  (on↑ press-vkey L3))
  (multi (macro ⌫ ⌫ ⌫ 🔣𝓒 🔣𝓐 🔣𝓛)  (on↓ tap-vkey L0)  (on↑ press-vkey L4))
  (multi (macro ⌫ ⌫ ⌫ 🔣𝔹 🔣𝔹 🔣ℝ)   (on↓ tap-vkey L0)  (on↑ press-vkey L5))
  (multi (macro ⌫ ⌫ ⌫ 🔣ˢ 🔣ᵘ 🔣ᵖ)    (on↓ tap-vkey L0)  (on↑ press-vkey L6))
  (multi (macro ⌫ ⌫ ⌫ 🔣ₛ 🔣ᵤ 🔣ᵦ)     (on↓ tap-vkey L0)  (on↑ press-vkey L7))
  (multi (macro ⌫ ⌫ ⌫ 🔣↹ 🔣⇪ 🔣⏎)   (on↓ tap-vkey L0)  (on↑ press-vkey L8))
))
)
(defvirtualkeys L1 (layer-while-held layout-IPA))
(defvirtualkeys L2 (layer-while-held layout-greek))
(defvirtualkeys L3 (layer-while-held layout-emoji))
(defvirtualkeys L4 (layer-while-held layout-mathcal))
(defvirtualkeys L5 (layer-while-held layout-mathbb))
(defvirtualkeys L6 (layer-while-held layout-superscript))
(defvirtualkeys L7 (layer-while-held layout-subscript))
(defvirtualkeys L8 (layer-while-held layout-keyboard))

(defvirtualkeys L0 (multi
  (on-press release-vkey L1)
  (on-press release-vkey L2)
  (on-press release-vkey L3)
  (on-press release-vkey L4)
  (on-press release-vkey L5)
  (on-press release-vkey L6)
  (on-press release-vkey L7)
  (on-press release-vkey L8)
))


(deflayer layout-IPA
  _   _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _   _      _     _    _      _    _     _   _     _     _    _    _   _   
  _    _     @əW   @əE   @əR   @əT  @əY   @əU    @əI   @əO  @əP _    _  _ 
  _     @əA   @əS   @əD   @əF   @əG  @əH   @əJ    @əK     @əL    🔣ː  _     _  
  _      @əZ   @əX   @əC   @əV   @əB   @əN  @əM     _     @ə.    _        _   
  _       _    _             _              _    _    _    _  _    _    
)

(defalias
  /tsh (macro 🔣t 🔣͡  🔣ʃ)
  /ts  (macro 🔣t 🔣͡  🔣s)
  /dzh (macro 🔣d 🔣͡  🔣ʒ)
  /dz  (macro 🔣d 🔣͡  🔣z)
  /pf  (macro 🔣p 🔣͡  🔣f)
  /ps  (macro 🔣p 🔣͡  🔣s)
)

(defalias
  əW (tap-dance 200 ((chord IPA w) 🔣ʷ))
  əF (tap-dance 200 ((chord IPA f)))
  əK (tap-dance 200 ((chord IPA k)))
  əM (tap-dance 200 ((chord IPA m) 🔣ɱ))
  əE (tap-dance 200 ((chord IPA e) 🔣ə 🔣ɛ 🔣ɜ 🔣ɚ 🔣ɝ))
  əR (tap-dance 200 ((chord IPA r) 🔣ɾ 🔣ɹ 🔣ʁ 🔣ʀ))
  əB (tap-dance 200 ((chord IPA b) 🔣β))
  əV (tap-dance 200 ((chord IPA v) 🔣ʋ 🔣ⱱ))
  əP (tap-dance 200 ((chord IPA p) 🔣ɸ))
  əS (tap-dance 200 ((chord IPA s) 🔣ʃ 🔣ʂ))
  əZ (tap-dance 200 ((chord IPA z) 🔣ʒ 🔣ʐ))
  əT (tap-dance 200 ((chord IPA t) 🔣θ 🔣ʈ))
  əD (tap-dance 200 ((chord IPA d) 🔣ð 🔣ɖ))
  əN (tap-dance 200 ((chord IPA n) 🔣ŋ 🔣ɲ 🔣ɳ))
  əY (tap-dance 200 ((chord IPA y) 🔣ʏ))
  əI (tap-dance 200 ((chord IPA i) 🔣ɪ 🔣ɨ))
  əU (tap-dance 200 ((chord IPA u) 🔣ʊ 🔣ʉ 🔣ɯ))
  əO (tap-dance 200 ((chord IPA o) 🔣ɔ 🔣ɒ 🔣œ 🔣ɶ))
  əA (tap-dance 200 ((chord IPA a) 🔣ʌ 🔣ɑ 🔣æ 🔣ɐ))
  əG (tap-dance 200 ((chord IPA g) 🔣ɣ 🔣ɢ))
  əH (tap-dance 200 ((chord IPA h) 🔣ʰ 🔣ɦ 🔣ħ))
  əJ (tap-dance 200 ((chord IPA j) 🔣ʒ 🔣ʲ 🔣ʝ 🔣ɟ))
  əL (tap-dance 200 ((chord IPA l) 🔣ʎ 🔣ɫ))
  əX (tap-dance 200 ((chord IPA x) 🔣χ 🔣ɕ))
  əC (tap-dance 200 ((chord IPA c) 🔣ç 🔣ɕ))
  ə. (tap-dance 200 ((chord IPA .) 🔣ʔ 🔣ʕ 🔣ʡ 🔣ʘ 🔣ǂ))
)
(defchords IPA 350
  (w) w (e) e (r) r (t) t (y) y (u) u (i) i (o) o (p) p
  (a) a (s) s (d) d (f) f (g) g (h) h (j) j (k) k (l) l
  (z) z (x) x (c) c (v) v (b) b (n) n (m) m       (.) .
  (l h) 🔣ʎ   (l w) 🔣ɫ
  (g h) 🔣ɣ   
  ;; (g n) 🔣ɲ ;; Italian
  (n g) 🔣ŋ ;; English
  (n h) 🔣ɳ
  (r t) 🔣ɾ   (r h) 🔣ɹ   (r g) 🔣ʁ
  (o w) 🔣ɒ   (a w) 🔣ɑ
  (a e) 🔣æ   (o e) 🔣ø   (e o a) 🔣œ
  (p h) 🔣ɸ   (p f) @/pf  (p s) @/ps 
  (t h) 🔣θ   (t s h) @/tsh   (t s) @/ts   (t c) @/tsh
  (d h) 🔣ð   (d z h) @/dzh   (d z) @/dz   (d j) @/dzh
  (s h) 🔣ʃ   (z h) 🔣ʒ
  (b h) 🔣β   (x h) 🔣ɕ   (c h) 🔣ç
)


(defalias L1 (tap-hold 180 180 1 (layer-while-held layout-greek)))
(defalias L2 (tap-hold 180 180 2 (layer-while-held layout-mathcal)))
(defalias L3 (tap-hold 180 180 3 (layer-while-held layout-mathbb)))
(defalias L4 (tap-hold 180 180 4 (layer-while-held layout-keyboard)))
(defalias L5 (tap-hold 180 180 5 (layer-while-held layout-emoji)))
(defalias L6 (tap-hold 180 180 6 (layer-while-held layout-superscript)))
(defalias L- (tap-hold 180 180 - (layer-while-held layout-subscript)))

(deflayer layout-qwerty ;; for reference
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣1   🔣2   🔣3   🔣4   🔣5   🔣6   🔣7   🔣8   🔣9   🔣0   🔣-   🔣= _   
  _      🔣q   🔣w   🔣e   🔣r   🔣t   🔣y   🔣u   🔣i   🔣o   🔣p   🔣[   🔣] _ 
  _       🔣a   🔣s   🔣d   🔣f   🔣g   🔣h   🔣j   🔣k   🔣l   🔣;   _    _  
  _        🔣z   🔣x   🔣c   🔣v   🔣b   🔣n   🔣m   🔣,   🔣.   _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-greek
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    @SG  _    _    _    _    _    _    _    _    _    _ _   
  _      🔣ψ   🔣ω   🔣ε   🔣ρ   🔣τ   🔣υ   🔣υ   🔣ι   🔣ο   🔣π   _    _ _ 
  _       🔣α   🔣σ   🔣δ   🔣φ   🔣γ   🔣η   🔣ξ   🔣κ   🔣λ   _    _    _  
  @SG      🔣ζ   🔣χ   🔣ψ   🔣ω   🔣β   🔣ν   🔣μ   _    _    _        @SG 
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SG (layer-while-held layout-greek-upper))
(deflayer layout-greek-upper
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣Ψ   🔣΅   🔣Ε   🔣Ρ   🔣Τ   🔣Υ   🔣Θ   🔣Ι   🔣Ο   🔣Π   _    _ _ 
  _       🔣Α   🔣Σ   🔣Δ   🔣Φ   🔣Γ   🔣Η   🔣Ξ   🔣Κ   🔣Λ   _    _    _  
  _        🔣Ζ   🔣Χ   🔣Ψ   🔣Ω   🔣Β   🔣Ν   🔣Μ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-mathcal
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝓠   🔣𝓦   🔣𝓔   🔣𝓡   🔣𝓣   🔣𝓨   🔣𝓤   🔣𝓘   🔣𝓞   🔣𝓟   _    _ _ 
  _       🔣𝓐   🔣𝓢   🔣𝓓   🔣𝓕   🔣𝓖   🔣𝓗   🔣𝓙   🔣𝓚   🔣𝓛   _    _    _  
  @SC      🔣𝓩   🔣𝓧   🔣𝓒   🔣𝓥   🔣𝓑   🔣𝓝   🔣𝓜   _    _    _        @SC 
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SC (layer-while-held layout-mathcal-lower))
(deflayer layout-mathcal-lower
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝓺   🔣𝔀   🔣𝓮   🔣𝓻   🔣𝓽   🔣𝔂   🔣𝓾   🔣𝓲   🔣𝓸   🔣𝓹   _    _ _ 
  _       🔣𝓪   🔣𝓼   🔣𝓭   🔣𝓯   🔣𝓰   🔣𝓱   🔣𝓳   🔣𝓴   🔣𝓵   _    _    _  
  _        🔣𝔃   🔣𝔁   🔣𝓬   🔣𝓿   🔣𝓫   🔣𝓷   🔣𝓶   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-mathbb
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣ℚ   🔣𝕎   🔣𝔼   🔣ℝ   🔣𝕋   🔣𝕐   🔣𝕌   🔣𝕀   🔣𝕆   🔣ℙ   _    _ _ 
  _       🔣𝔸   🔣𝕊   🔣𝔻   🔣𝔽   🔣𝔾   🔣ℍ   🔣𝕁   🔣𝕂   🔣𝕃   _    _    _  
  @SB      🔣ℤ   🔣𝕏   🔣ℂ   🔣𝕍   🔣𝔹   🔣ℕ   🔣𝕄   _    _    _        @SB 
  _      _    _             _               _    _    _    _  _    _    
)
(defalias SB (layer-while-held layout-mathbb-lower))
(deflayer layout-mathbb-lower
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     _    _    _    _    _    _    _    _    _    _    _    _ _   
  _      🔣𝕢   🔣𝕨   🔣𝕖   🔣𝕣   🔣𝕥   🔣𝕪   🔣𝕦   🔣𝕚   🔣𝕠   🔣𝕡   _    _ _ 
  _       🔣𝕒   🔣𝕤   🔣𝕕   🔣𝕗   🔣𝕘   🔣𝕙   🔣𝕛   🔣𝕜   🔣𝕝   _    _    _  
  _        🔣𝕫   🔣𝕩   🔣𝕔   🔣𝕧   🔣𝕓   🔣𝕟   🔣𝕞   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-superscript
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣¹   🔣²   🔣³   🔣⁴   🔣⁵   🔣⁶   🔣⁷   🔣⁸   🔣⁹   🔣⁰   🔣⁻   🔣⁼ _   
  _      🔣ᑫ   🔣ʷ   🔣ᵉ   🔣ʳ   🔣ᵗ   🔣ʸ   🔣ᵘ   🔣ⁱ   🔣ᵒ   🔣ᵖ   _    _ _ 
  _       🔣ᵃ   🔣ˢ   🔣ᵈ   🔣ᶠ   🔣ᵍ   🔣ʰ   🔣ʲ   🔣ᵏ   🔣ˡ   _    _    _  
  _        🔣ᶻ   🔣ˣ   🔣ᶜ   🔣ᵛ   🔣ᵇ   🔣ⁿ   🔣ᵐ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-subscript
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣₁   🔣₂   🔣₃   🔣₄   🔣₅   🔣₆   🔣₇   🔣₈   🔣₉   🔣₀   _    _ _   
  _      🔣ᵩ   🔣ᵥ   🔣ₑ   🔣ᵣ   🔣ₜ   🔣ᵧ   🔣ᵤ   🔣ᵢ   🔣ₒ   🔣ₚ   _    _ _ 
  _       🔣ₐ   🔣ₛ   🔣ₑ   🔣ᵥ   🔣ᵨ   🔣ₕ   🔣ⱼ   🔣ₖ   🔣ₗ   _    _    _  
  _        🔣ₓ   _    🔣ₒ   🔣ᵥ   🔣ᵦ   🔣ₙ   🔣ₘ   _    _    _        _   
  _      _    _             _               _    _    _    _  _    _    
)
(deflayer layout-keyboard
  _    🔣🔇  🔣🔉   🔣🔊  🔣⌨   🔣🔆  🔣🔅   _   _    _  _    _    _   🔣⎀  🔣⌦ 
  _     _    _    _    _    _    _    _    _    _    _    _    _ 🔣⌫  
  🔣↹     _    _    _    _    _    _    _    _    _    _    _    _ _ 
  🔣⇪      _    _    _    _    _    _    _    _    _    _    _    🔣⏎ 
  🔣⇧       _    _    _    _    _    _    _    _    _    _        🔣⇧  
  🔣☸     🔣❖   🔣⌥            🔣␣              _    🔣☸   (macro 🔣⇤ 🔣←) (macro 🔣⇞ 🔣↑) (macro 🔣⇟ 🔣↓) (macro 🔣⇥ 🔣→)
)
;; https://home.unicode.org/emoji/emoji-frequency/
 
 
(deflayer layout-emoji
  _    _   _    _   _    _   _    _   _    _  _    _    _   _   _  
  _     🔣😂   🔣😉   🔣😍   🔣🤣   🔣😊   🔣🙏   🔣💕   🔣😭   🔣😘   _    _    _ _   
  _      🔣❤️   🔣👍   🔣😅   🔣👏   🔣😁   🔣♥️   🔣🔥   _    _    _    _    _ _ 
  _       🔣💔   🔣💖   🔣💙   🔣😢   🔣🤔   🔣😆   🔣🙄   🔣💪   🔣☺️   _    _    _  
  _        🔣👌   🔣🤗   _    _    _    _    _    _    _    _        _   
  _      _    _             _               _    _    _    🔣👍 🔣👎   _    
)
;; Pending: IPA and emoji layers


;; ---------------------------------------------


(deftemplate def-seq (vk-name input-keys output-action)
  (defvirtualkeys $vk-name $output-action)
  (defseq $vk-name $input-keys)
)
(template-expand def-seq \\ (\ \) (macro \ \))
(template-expand def-seq \perp         (\ p e r p                   spc) (unicode ⟂))
(template-expand def-seq \alpha        (\ a l p h a                 spc) (unicode α))
(template-expand def-seq \beta         (\ b e t a                   spc) (unicode β))
(template-expand def-seq \gamma        (\ g a m m a                 spc) (unicode γ))
(template-expand def-seq \upgamma      (\ S-g a m m a               spc) (unicode Γ))
(template-expand def-seq \delta        (\ d e l t a                 spc) (unicode δ))
(template-expand def-seq \updelta      (\ S-d e l t a               spc) (unicode Δ))
(template-expand def-seq \eps          (\ e p s                     spc) (unicode ϵ))
(template-expand def-seq \epsilon      (\ e p s i l o n             spc) (unicode ϵ))
(template-expand def-seq \pi           (\ p i                       spc) (unicode π))
(template-expand def-seq \uppi         (\ S-p i                     spc) (unicode Π))
(template-expand def-seq \sigma        (\ s i g m a                 spc) (unicode σ))
(template-expand def-seq \upsigma      (\ S-s i g m a               spc) (unicode Σ))
(template-expand def-seq \lambda       (\ l a m b d a               spc) (unicode λ))
(template-expand def-seq \uplambda     (\ S-l a m b d a             spc) (unicode Λ))
(template-expand def-seq \omega        (\ o m e g a                 spc) (unicode ω))
(template-expand def-seq \upomega      (\ S-o m e g a               spc) (unicode Ω))
(template-expand def-seq \theta        (\ t h e t a                 spc) (unicode θ))
(template-expand def-seq \uptheta      (\ S-t h e t a               spc) (unicode Θ))
(template-expand def-seq \phi          (\ p h i                     spc) (unicode ϕ))
(template-expand def-seq \upphi        (\ S-p h i                   spc) (unicode Φ))
(template-expand def-seq \vartheta     (\ v a r t h e t a           spc) (unicode ϑ))
(template-expand def-seq \tau          (\ t a u                     spc) (unicode τ))
(template-expand def-seq \rho          (\ r h o                     spc) (unicode ρ))
(template-expand def-seq \mu           (\ m u                       spc) (unicode μ))
(template-expand def-seq \nu           (\ n u                       spc) (unicode ν))
(template-expand def-seq \eta          (\ e t a                     spc) (unicode η))
(template-expand def-seq \kappa        (\ k a p p a                 spc) (unicode κ))
(template-expand def-seq \iota         (\ i o t a                   spc) (unicode ι))
(template-expand def-seq \upsilon      (\ u p s i l o n             spc) (unicode υ))
(template-expand def-seq \chi          (\ c h i                     spc) (unicode χ))
(template-expand def-seq \zeta         (\ z e t a                   spc) (unicode ζ))
(template-expand def-seq \xi           (\ x i                       spc) (unicode ξ))
(template-expand def-seq \upxi         (\ S-x i                     spc) (unicode Ξ))
(template-expand def-seq \down         (\ d o w n                   spc) (unicode ↓))
(template-expand def-seq \up           (\ u p                       spc) (unicode ↑ ))
(template-expand def-seq \mapsto       (\ m a p s t o               spc) (unicode ↦))
(template-expand def-seq \rightarrow   (\ r i g h t a r r o w       spc) (unicode →))
(template-expand def-seq \leftarrow    (\ l e f t a r r o w         spc) (unicode ←))
(template-expand def-seq \left         (\ l e f t                   spc) (unicode ←))
(template-expand def-seq \right        (\ r i g h t                 spc) (unicode →))
(template-expand def-seq \to           (\ t o                       spc) (unicode →))
(template-expand def-seq \leftrightarrow (\ l e f t r i g h t a r r o w spc) (unicode ↔))
(template-expand def-seq \leftright    (\ l e f t r i g h t         spc) (unicode ↔))
(template-expand def-seq \lr           (\ l r                       spc) (unicode ↔))
(template-expand def-seq \proportional (\ p r o p o r t i o n a l   spc) (unicode ∝))
(template-expand def-seq \propto       (\ p r o p t o               spc) (unicode ∝))
(template-expand def-seq \prop         (\ p r o p                   spc) (unicode ∝))
(template-expand def-seq \approx       (\ a p p r o x               spc) (unicode ≈))
(template-expand def-seq \neq          (\ n e q                     spc) (unicode ≠))
(template-expand def-seq \eqdef        (\ e q d e f                 spc) (unicode ≝))
(template-expand def-seq \leq          (\ l e q                     spc) (unicode ≤))
(template-expand def-seq \geq          (\ g e q                     spc) (unicode ≥))
(template-expand def-seq \sum          (\ s u m                     spc) (unicode ∑))
(template-expand def-seq \in           (\ i n                       spc) (unicode ∈))
(template-expand def-seq \infty        (\ i n f t y                 spc) (unicode ∞))
(template-expand def-seq \oo           (\ o o                       spc) (unicode ∞))
(template-expand def-seq \cdots        (\ c d o t s                 spc) (unicode ⋯))
(template-expand def-seq \dag          (\ d a g                     spc) (unicode †))
(template-expand def-seq \planck       (\ p l a n c k               spc) (unicode ħ))
(template-expand def-seq \rangle       (\ r a n g l e               spc) (unicode 〉))
(template-expand def-seq \langle       (\ l a n g l e               spc) (unicode 〈))
(template-expand def-seq \cala         (\ c a l a                   spc) (unicode 𝓐))
(template-expand def-seq \bba          (\ b b a                     spc) (unicode 𝔸))
(template-expand def-seq \calb         (\ c a l b                   spc) (unicode 𝓑))
(template-expand def-seq \calc         (\ c a l c                   spc) (unicode 𝓒))
(template-expand def-seq \cald         (\ c a l d                   spc) (unicode 𝓓))
(template-expand def-seq \cale         (\ c a l e                   spc) (unicode 𝓔))
(template-expand def-seq \bbe          (\ b b e                     spc) (unicode 𝔼))
(template-expand def-seq \calf         (\ c a l f                   spc) (unicode 𝓕))
(template-expand def-seq \calg         (\ c a l g                   spc) (unicode 𝓖))
(template-expand def-seq \calh         (\ c a l h                   spc) (unicode 𝓗))
(template-expand def-seq \call         (\ c a l l                   spc) (unicode 𝓛))
(template-expand def-seq \calm         (\ c a l m                   spc) (unicode 𝓜))
(template-expand def-seq \caln         (\ c a l n                   spc) (unicode 𝓝))
(template-expand def-seq \bbn          (\ b b n                     spc) (unicode ℕ))
(template-expand def-seq \calp         (\ c a l p                   spc) (unicode 𝓟))
(template-expand def-seq \bbp          (\ b b p                     spc) (unicode ℙ))
(template-expand def-seq \calq         (\ c a l q                   spc) (unicode 𝓠))
(template-expand def-seq \bbq          (\ b b q                     spc) (unicode ℚ))
(template-expand def-seq \calr         (\ c a l r                   spc) (unicode 𝓡))
(template-expand def-seq \bbr          (\ b b r                     spc) (unicode ℝ))
(template-expand def-seq \calu         (\ c a l u                   spc) (unicode 𝓤))
(template-expand def-seq \calw         (\ c a l w                   spc) (unicode 𝓦))
(template-expand def-seq \calx         (\ c a l x                   spc) (unicode 𝓧))
(template-expand def-seq \caly         (\ c a l y                   spc) (unicode 𝓨))
(template-expand def-seq \calz         (\ c a l z                   spc) (unicode 𝓩))
(template-expand def-seq \parallel     (\ p a r a l l e l           spc) (unicode ∥))
(template-expand def-seq \norm         (\ n o r m                   spc) (macro 🔣‖ 🔣· 🔣‖))
(template-expand def-seq \noteq        (\ n o t e q                 spc) (unicode ≠))
(template-expand def-seq \cdot         (\ c d o t                   spc) (unicode ·))
(template-expand def-seq \bbone        (\ b b o n e                 spc) (unicode 𝟙))
(template-expand def-seq \rr           (\ r r                       spc) (unicode ≫))
(template-expand def-seq \ll           (\ l l                       spc) (unicode ≪))
(template-expand def-seq \equiv        (\ e q u i v                 spc) (unicode ≡))
(template-expand def-seq \isomorphic   (\ i s o m o r p h i c       spc) (unicode ≌))
(template-expand def-seq \entails      (\ e n t a i l s             spc) (macro 🔣⊢ 🔣⊦ 🔣⊧ 🔣⊨))
(template-expand def-seq \minusplus    (\ m i n u s p l u s         spc) (unicode ∓))
(template-expand def-seq \circ         (\ c i r c                   spc) (unicode ∘))
(template-expand def-seq \play         (\ p l a y                   spc) (unicode ⊳))
(template-expand def-seq \then         (\ t h e n                   spc) (unicode ⊳))
(template-expand def-seq \bot          (\ b o t                     spc) (unicode ⊥))
(template-expand def-seq \top          (\ t o p                     spc) (unicode ⊤))
(template-expand def-seq \oplus        (\ o p l u s                 spc) (unicode ⊕))
(template-expand def-seq \times        (\ t i m e s                 spc) (unicode ×))
(template-expand def-seq \transpose    (\ t r a n s p o s e         spc) (unicode ᵀ))
(template-expand def-seq \bullet       (\ b u l l e t               spc) (unicode •))
(template-expand def-seq \normal       (\ n o r m a l               spc) (macro 🔣~ 🔣𝓝 \( 🔣μ 🔣, spc 🔣σ 🔣² \) ))
(template-expand def-seq \prod         (\ p r o d                   spc) (unicode π))
(template-expand def-seq \sqrt3        (\ s q r t 3                 spc) (unicode ∛))
(template-expand def-seq \sqrt         (\ s q r t                   spc) (unicode √))
(template-expand def-seq \uomega       (\ u o m e g a               spc) (unicode ω))
(template-expand def-seq \ulambda      (\ u l a m b d a             spc) (unicode λ))
(template-expand def-seq \upi          (\ u p i                     spc) (unicode ∏))
(template-expand def-seq \usigma       (\ u s i g m a               spc) (unicode ∑))
(template-expand def-seq \udelta       (\ u d e l t a               spc) (unicode δ))
(template-expand def-seq \ugamma       (\ u g a m m a               spc) (unicode γ))
(template-expand def-seq \over         (\ o v e r                   spc) (unicode ⁄))
(template-expand def-seq \frac         (\ f r a c                   spc) (unicode ⁄))
(template-expand def-seq \varepsilon   (\ v a r e p s i l o n       spc) (unicode ε))
(template-expand def-seq \nxn          (\ n x n                     spc) (macro 🔣n 🔣× 🔣n))
(template-expand def-seq \mxn          (\ m x n                     spc) (macro 🔣m 🔣× 🔣n))
(template-expand def-seq \notparallel  (\ n o t p a r a l l e l     spc) (unicode ∦))
(template-expand def-seq \nparallel    (\ n p a r a l l e l         spc) (unicode ∦))
(template-expand def-seq \notsubseteq  (\ n o t s u b s e t e q     spc) (unicode ⊈))
(template-expand def-seq \supseteq     (\ s u p s e t e q           spc) (unicode ⊇))
(template-expand def-seq \subseteq     (\ s u b s e t e q           spc) (unicode ⊆))
(template-expand def-seq \notsupset    (\ n o t s u p s e t         spc) (unicode ⊅))
(template-expand def-seq \notsubset    (\ n o t s u b s e t         spc) (unicode ⊄))
(template-expand def-seq \supset       (\ s u p s e t               spc) (unicode ⊃))
(template-expand def-seq \subset       (\ s u b s e t               spc) (unicode ⊂))
(template-expand def-seq \notsupseteq  (\ n o t s u p s e t e q     spc) (unicode ⊉))
(template-expand def-seq \coloneq      (\ c o l o n e q             spc) (unicode ≔))
(template-expand def-seq \:=           (\ S-; =                     spc) (unicode ≔))
(template-expand def-seq \ne           (\ n e                       spc) (unicode ≠))
(template-expand def-seq \dash         (\ d a s h                   spc) (unicode —))
(template-expand def-seq \emdash       (\ e m d a s h               spc) (unicode —))
(template-expand def-seq \em           (\ e m                       spc) (unicode —))
(template-expand def-seq \grad         (\ g r a d                   spc) (unicode ∇))
(template-expand def-seq \nabla        (\ n a b l a                 spc) (unicode ∇))
(template-expand def-seq ==>           (\ = = S-,                   spc) (unicode ⇒))
(template-expand def-seq 2/3           (\ 2 / 3                     spc) (unicode ⅔))
(template-expand def-seq tm            (\ t m                       spc) (unicode ™))
(template-expand def-seq 7/8           (\ 7 / 8                     spc) (unicode ⅞))
(template-expand def-seq 5/6           (\ 5 / 6                     spc) (unicode ⅚))
(template-expand def-seq 5/8           (\ 5 / 8                     spc) (unicode ⅝))
(template-expand def-seq 3/5           (\ 3 / 5                     spc) (unicode ⅗))
(template-expand def-seq 3/4           (\ 3 / 4                     spc) (unicode ¾))
(template-expand def-seq <==           (\ S-, = =                   spc) (unicode ⇐))
(template-expand def-seq 2/5           (\ 2 / 5                     spc) (unicode ⅖))
(template-expand def-seq <=>           (\ S-, = S-.                 spc) (unicode ⇔))
(template-expand def-seq 3/8           (\ 3 / 8                     spc) (unicode ⅜))
(template-expand def-seq 4/5           (\ 4 / 5                     spc) (unicode ⅘))
(template-expand def-seq -->           (\ - - S-.                   spc) (unicode →))
(template-expand def-seq ...           (\ . . .                     spc) (unicode …))
(template-expand def-seq <--           (\ S-, - -                   spc) (unicode ←))
(template-expand def-seq 1/6           (\ 1 / 6                     spc) (unicode ⅙))
(template-expand def-seq 1/8           (\ 1 / 8                     spc) (unicode ⅛))
(template-expand def-seq 1/3           (\ 1 / 3                     spc) (unicode ⅓))
(template-expand def-seq 1/2           (\ 1 / 2                     spc) (unicode ½))
(template-expand def-seq c/o           (\ c / o                     spc) (unicode ℅))
(template-expand def-seq 1/5           (\ 1 / 5                     spc) (unicode ⅕))
(template-expand def-seq 1/4           (\ 1 / 4                     spc) (unicode ¼))
(template-expand def-seq =:            (\ = S-;                     spc) (unicode ≕))
(template-expand def-seq ^t            (\ S-6 t                     spc) (unicode ᵀ))
(template-expand def-seq ^T            (\ S-6 S-t                   spc) (unicode ᵀ))
(template-expand def-seq ^{-1}         (\ S-6 { - 1 }               spc) (macro 🔣⁻🔣¹))
(template-expand def-seq ^-1           (\ S-6 - 1                   spc) (macro 🔣⁻🔣¹))
(template-expand def-seq ^+            (\ S-6 S-=                   spc) (unicode ⁺))
(template-expand def-seq ^w            (\ S-6 w                     spc) (unicode ʷ))
(template-expand def-seq ^j            (\ S-6 j                     spc) (unicode ʲ))
(template-expand def-seq ^h            (\ S-6 h                     spc) (unicode ʰ))
(template-expand def-seq _i=1..        (\ S-- i = 1 . .             spc) (macro 🔣ᵢ 🔣₌ 🔣₁ 🔣₂ 🔣. 🔣. 🔣ₙ 🔣ₘ))
(template-expand def-seq _=            (\ S-- =                     spc) (unicode ₌))
(template-expand def-seq _x            (\ S-- x                     spc) (unicode ₓ))
(template-expand def-seq ^k            (\ S-6 k                     spc) (unicode ᵏ))
(template-expand def-seq _k            (\ S-- k                     spc) (unicode ₖ))
(template-expand def-seq _j            (\ S-- j                     spc) (unicode ⱼ))
(template-expand def-seq _1..m         (\ S-- 1 . . m               spc) (macro 🔣₁ 🔣. 🔣. 🔣ₘ))
(template-expand def-seq _m            (\ S-- m                     spc) (unicode ₘ))
(template-expand def-seq _n            (\ S-- n                     spc) (unicode ₙ))
(template-expand def-seq ^d            (\ S-6 d                     spc) (unicode ᵈ))
(template-expand def-seq ^m            (\ S-6 m                     spc) (unicode ᵐ))
(template-expand def-seq ^i            (\ S-6 i                     spc) (unicode ⁱ))
(template-expand def-seq ^n            (\ S-6 n                     spc) (unicode ⁿ))
(template-expand def-seq _0            (\ S-- 0                     spc) (unicode ₀))
(template-expand def-seq _1            (\ S-- 1                     spc) (unicode ₁))
(template-expand def-seq _i            (\ S-- i                     spc) (unicode ᵢ))
(template-expand def-seq _1..n         (\ S-- 1 . . n               spc) (macro 🔣₁ 🔣. 🔣. 🔣ₙ))
(template-expand def-seq ^2            (\ S-6 2                     spc) (unicode ²))
(template-expand def-seq 1/n           (\ 1 / n                     spc) (macro 🔣¹ 🔣⁄ 🔣ₙ))
(template-expand def-seq ,...,         (\ , . . . ,                 spc) (macro 🔣, 🔣… 🔣,))
(template-expand def-seq ,...          (\ , . . .                   spc) (macro 🔣, 🔣…))
(template-expand def-seq +...+         (\ S-= . . . S-=             spc) (macro 🔣+ 🔣⋯ 🔣+))
(template-expand def-seq ...+          (\ . . . S-=                 spc) (macro 🔣⋯ 🔣+))
(template-expand def-seq ...,          (\ . . . ,                   spc) (macro 🔣… 🔣,))
(template-expand def-seq 1/            (\ 1 /                       spc) (macro 🔣¹ 🔣⁄))
(template-expand def-seq 2/            (\ 2 /                       spc) (macro 🔣² 🔣⁄))
(template-expand def-seq _123          (\ S-- 1 2 3                 spc) (macro 🔣₁ 🔣₂ 🔣₃ 🔣₄ 🔣₅ 🔣₆ 🔣₇ 🔣₈ 🔣₉ 🔣₀))
(template-expand def-seq ^123          (\ S-6 1 2 3                 spc) (macro 🔣¹ 🔣² 🔣³ 🔣⁴ 🔣⁵ 🔣⁶ 🔣⁷ 🔣⁸ 🔣⁹ 🔣⁰))
;; (defvirtualkeys
;;   ;;\superscripts (unicode latin letters:   superscripts: ¹ ² ³ ⁴ ⁵ ⁶ ⁷ ⁸ ⁹ ⁰   subscripts: ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉ ₀   modifiers: ̂ ̃ ̄ ̈ ̧ ̆ ̇ ̃ ̉ ̌ ̨ ̷ ̳  greek letters:   superscripts: ᵝ ᵞ ᵟ ᵋ ᶿ   subscripts: ₀ ₁ ₂ ₃ ₄ ₅ ₆ ₇ ₈ ₉   modifiers: ̂ ̃ ̄ ̈ ̧ ̆ ̇ ̃ ̉ ̌ ̨ ̷ ̳)
;; 
(template-expand def-seq [Y]   (\ S-9 y S-0    spc) 🔣👍  ) ;; Thumbs Up 
(template-expand def-seq [Y]2  (\ sft 9 y 0    spc) 🔣👍  ) ;; Thumbs Up 
(template-expand def-seq [N]   (\ S-9 n S-0    spc) 🔣👎  ) ;; Thumbs Down 
(template-expand def-seq [N]2  (\ sft 9 n 0    spc) 🔣👎  ) ;; Thumbs Down 
(template-expand def-seq :]    (\ S-; S-0      spc) 🔣😊  ) ;; Smile 
(template-expand def-seq :]2   (\ sft ; 0      spc) 🔣😊  ) ;; Smile 
(template-expand def-seq :[    (\ S-; S-9      spc) 🔣☹️  ) ;; Sad 
(template-expand def-seq :[2   (\ sft ; 9      spc) 🔣☹️  ) ;; Sad 
(template-expand def-seq ;]    (\ ; S-0        spc) 🔣😉  ) ;; Wink 
(template-expand def-seq :D    (\ S-; d        spc) 🔣😃  ) ;; Laugh 
(template-expand def-seq :P    (\ S-; p        spc) 🔣😛  ) ;; Tongue Out 
(template-expand def-seq [A]   (\ S-9 a S-0    spc) 🔣😇  ) ;; Angel 
(template-expand def-seq [A]2  (\ sft 9 a 0    spc) 🔣😇  ) ;; Angel 
(template-expand def-seq :'[   (\ S-; ' S-9    spc) 🔣😢  ) ;; Cry 
(template-expand def-seq >:[   (\ S-. S-; S-9  spc) 🔣😡  ) ;; Angry 
(template-expand def-seq >:[2  (\ sft . ; 9    spc) 🔣😡  ) ;; Angry 
(template-expand def-seq B-]   (\ b - S-0      spc) 🔣😎  ) ;; Cool 
(template-expand def-seq ;P    (\ ; p          spc) 🔣😜  ) ;; Stuck Out Tongue Winking Eye 
(template-expand def-seq |-]   (\ S-\ - S-0    spc) 🔣😴  ) ;; Sleepy 
(template-expand def-seq think  (\ t h i n k      spc) 🔣🤔)
(template-expand def-seq monkey (\ m o n k e y    spc) (macro 🔣🙈️ 🔣🙊️ 🔣🙉️ 🔣🐵️))
(template-expand def-seq ok     (\ o k            spc) 🔣👌)
(template-expand def-seq haha   (\ h a h a        spc) (macro 🔣😂 🔣🤣))
(template-expand def-seq love   (\ m e n u        spc) 🔣☰)


(template-expand def-seq \arrows       (\ a r r o w s               spc) (macro  🔣← 🔣↑ 🔣→ 🔣↓ 🔣↔ 🔣↕ 🔣↖ 🔣↘ 🔣↙ 🔣↚ 🔣↛ 🔣↜ 🔣↝ 🔣↞ 🔣↟ 🔣↠ 🔣↡ 🔣↢ 🔣↣ 🔣↤ 🔣↥ 🔣↦ 🔣↧ 🔣↨ 🔣↩ 🔣↯ 🔣↰ 🔣↱ 🔣↲ 🔣↳ 🔣↴ 🔣↵ 🔣↶ 🔣↷ 🔣↸ 🔣↹ 🔣↺ 🔣↻ 🔣↼ 🔣↽ 🔣↾ 🔣↿ 🔣⇀ 🔣⇁ 🔣⇂ 🔣⇃ 🔣⇄ 🔣⇅ 🔣⇆ 🔣⇇ 🔣⇈ 🔣⇉ 🔣⇊ 🔣⇋ 🔣⇌ 🔣⇍ 🔣⇎ 🔣⇏ 🔣⇐ 🔣⇑ 🔣⇒ 🔣⇓ 🔣⇔ 🔣⇕ 🔣⇖ 🔣⇗ 🔣⇘ 🔣⇙ 🔣⇚ 🔣⇛ 🔣⇜ 🔣⇝ 🔣⇞ 🔣⇟ 🔣⇠ 🔣⇡ 🔣⇢ 🔣⇣ 🔣⇤ 🔣⇥ 🔣⇦ 🔣⇧ 🔣⇨ 🔣⇩ 🔣⇪ 🔣⇫ 🔣⇬ 🔣⇭ 🔣⇮ 🔣⇯ 🔣⇰ 🔣⇱ 🔣⇲ 🔣⇳ 🔣⇴ 🔣⇵ 🔣⇶ 🔣⇷ 🔣⇸ 🔣⇹ 🔣⇺ 🔣⇻ 🔣⇼ 🔣⇽ 🔣⇾ 🔣⇿ 🔣☇ 🔣☈ 🔣➘ 🔣➙ 🔣➚ 🔣➛ 🔣➜ 🔣➝ 🔣➞ 🔣➟ 🔣➠ 🔣➡ 🔣➢ 🔣➣ 🔣➤ 🔣➥ 🔣➦ 🔣➧ 🔣➨ 🔣➩ 🔣➪ 🔣➫ 🔣➬ 🔣➭ 🔣➮ 🔣➯ 🔣➱ 🔣➲ 🔣➳ 🔣➴ 🔣➵ 🔣➶ 🔣➷ 🔣➸ 🔣➹ 🔣➺ 🔣➻ 🔣➼ 🔣➽ 🔣➾ 🔣⟰ 🔣⟱ 🔣⟲ 🔣⟳ 🔣⟴ 🔣⟵ 🔣⟶ 🔣⟷ 🔣⟸ 🔣⟹ 🔣⟺ 🔣⟻ 🔣⟼ 🔣⟽ 🔣⟾ 🔣⟿ 🔣⤀ 🔣⤁ 🔣⤂ 🔣⤃ 🔣⤄ 🔣⤅ 🔣⤆ 🔣⤇ 🔣⤈ 🔣⤉ 🔣⤊ 🔣⤋ 🔣⤌ 🔣⤍ 🔣⤎ 🔣⤏ 🔣⤐ 🔣⤑ 🔣⤒ 🔣⤓ 🔣⤔ 🔣⤕ 🔣⤖ 🔣⤗ 🔣⤘ 🔣⤙ 🔣⤚ 🔣⤛ 🔣⤜ 🔣⤝ 🔣⤞ 🔣⤟ 🔣⤠ 🔣⤡ 🔣⤢ 🔣⤣ 🔣⤤ 🔣⤥ 🔣⤦ 🔣⤧ 🔣⤨ 🔣⤩ 🔣⤪ 🔣⤫ 🔣⤬ 🔣⤭ 🔣⤮ 🔣⤯ 🔣⤰ 🔣⤱ 🔣⤲ 🔣⤳ 🔣⤴ 🔣⤵ 🔣⤶ 🔣⤷ 🔣⤸ 🔣⤹ 🔣⤺ 🔣⤻ 🔣⤼ 🔣⤽ 🔣⤾ 🔣⤿ 🔣⥀ 🔣⥁ 🔣⥂ 🔣⥃ 🔣⥄ 🔣⥅ 🔣⥆ 🔣⥇ 🔣⥈ 🔣⥉ 🔣⥊ 🔣⥋ 🔣⥌ 🔣⥍ 🔣⥎ 🔣⥏ 🔣⥐ 🔣⥑ 🔣⥒ 🔣⥓ 🔣⥔ 🔣⥕ 🔣⥖ 🔣⥗ 🔣⥘ 🔣⥙ 🔣⥚ 🔣⥛ 🔣⥜ 🔣⥝ 🔣⥞ 🔣⥟ 🔣⥠ 🔣⥡ 🔣⥢ 🔣⥣ 🔣⥤ 🔣⥥ 🔣⥦ 🔣⥧ 🔣⥨ 🔣⥩ 🔣⥪ 🔣⥫ 🔣⥬ 🔣⥭ 🔣⥮ 🔣⥯ 🔣⥰ 🔣⥱ 🔣⥲ 🔣⥳ 🔣⥴ 🔣⥵ 🔣⥶ 🔣⥷ 🔣⥸ 🔣⥹ 🔣⥺ 🔣⥻ 🔣⥼ 🔣⥽ 🔣⥾ 🔣⥿ 🔣⬀ 🔣⬁ 🔣⬂ 🔣⬃ 🔣⬄ 🔣⬅ 🔣⬆ 🔣⬇ 🔣⬈ 🔣⬉ 🔣⬊ 🔣⬋ 🔣⬌ 🔣⬍ 🔣⬎ 🔣⬏ 🔣⬐ 🔣⬑ 🔣⬰ 🔣⬱ 🔣⬲ 🔣⬳ 🔣⬴ 🔣⬵ 🔣⬶ 🔣⬷ 🔣⬸ 🔣⬹ 🔣⬺ 🔣⬻ 🔣⬼ 🔣⬽ 🔣⬾ 🔣⬿ 🔣⭀ 🔣⭁ 🔣⭂ 🔣⭃ 🔣⭄ 🔣⭅ 🔣⭆ 🔣⭇ 🔣⭈ 🔣⭉ 🔣⭊ 🔣⭋ 🔣⭌ 🔣⭍ 🔣⭎ 🔣⭏ 🔣⭚ 🔣⭛ 🔣⭜ 🔣⭝ 🔣⭞ 🔣⭟ 🔣⭠ 🔣⭡ 🔣⭢ 🔣⭣ 🔣⭤ 🔣⭥ 🔣⭦ 🔣⭧ 🔣⭨ 🔣⭩ 🔣⭪ 🔣⭬ 🔣⭭ 🔣⭮ 🔣⭯ 🔣⭱ 🔣⭲ 🔣⭳ 🔣⭶ 🔣⭷ 🔣⭸ 🔣⭺ 🔣⭻ 🔣⭼ 🔣⭽ 🔣⭾ 🔣⭿ 🔣⮀ 🔣⮁ 🔣⮂ 🔣⮃ 🔣⮄ 🔣⮅ 🔣⮆ 🔣⮇ 🔣⮈ 🔣⮉ 🔣⮊ 🔣⮋ 🔣⮌ 🔣⮍ 🔣⮎ 🔣⮏ 🔣⮐ 🔣⮑ 🔣⮒ 🔣⮓ 🔣⮔ 🔣⮕ 🔣⮗ 🔣⮘ 🔣⮙ 🔣⮚ 🔣⮛ 🔣⮜ 🔣⮝ 🔣⮞ 🔣⮟ 🔣⮠ 🔣⮡ 🔣⮢ 🔣⮣ 🔣⮥ 🔣⮦ 🔣⮧ 🔣⮩ 🔣⮪ 🔣⮫ 🔣⮭ 🔣⮮ 🔣⮯ 🔣⮱ 🔣⮲ 🔣⮴ 🔣⮵ 🔣⮶ 🔣⮷ 🔣⮸ 🔣⮹ 🔣⯬ 🔣⯭ 🔣⯮ 🔣⯯ 🔣🏹 🔣🔙 🔣🔚 🔣🔛 🔣🔜 🔣🔝 🔣🞀 🔣🞁 🔣🞂 🔣🞃 🔣🠀 🔣🠁 🔣🠂 🔣🠃 🔣🠄 🔣🠅 🔣🠆 🔣🠇 🔣🠈 🔣🠉 🔣🠊 🔣🠋 🔣🠐 🔣🠑 🔣🠒 🔣🠓 🔣🠔 🔣🠕 🔣🠖 🔣🠗 🔣🠘 🔣🠙 🔣🠚 🔣🠛 🔣🠜 🔣🠝 🔣🠞 🔣🠟 🔣🠠 🔣🠡 🔣🠢 🔣🠣 🔣🠤 🔣🠥 🔣🠦 🔣🠧 🔣🠨 🔣🠩 🔣🠪 🔣🠫 🔣🠬 🔣🠭 🔣🠮 🔣🠯 🔣🠰 🔣🠱 🔣🠲 🔣🠳 🔣🠵 🔣🠶 🔣🠷 🔣🠸 🔣🠹 🔣🠺 🔣🠼 🔣🠽 🔣🠾 🔣🠿 🔣🡀 🔣🡁 🔣🡂 🔣🡃 🔣🡄 🔣🡅 🔣🡆 🔣🡇 🔣🡐 🔣🡑 🔣🡒 🔣🡓 🔣🡔 🔣🡕 🔣🡖 🔣🡗 🔣🡘 🔣🡙 🔣🡠 🔣🡡 🔣🡢 🔣🡣 🔣🡤 🔣🡥 🔣🡦 🔣🡧 🔣🡨 🔣🡩 🔣🡪 🔣🡫 🔣🡬 🔣🡭 🔣🡮 🔣🡯 🔣🡰 🔣🡱 🔣🡲 🔣🡳 🔣🡴 🔣🡵 🔣🡶 🔣🡷 🔣🡸 🔣🡹 🔣🡺 🔣🡻 🔣🡼 🔣🡽 🔣🡾 🔣🡿 🔣🢀 🔣🢁 🔣🢂 🔣🢃 🔣🢄 🔣🢅 🔣🢆 🔣🢇 🔣🢐 🔣🢑 🔣🢒 🔣🢓 🔣🢔 🔣🢕 🔣🢖 🔣🢗 🔣🢘 🔣🢙 🔣🢚 🔣🢛 🔣🢜 🔣🢝 🔣🢞 🔣🢟 🔣🢠 🔣🢡 🔣🢢 🔣🢣 🔣🢤 🔣🢥 🔣🢦 🔣🢧 🔣🢨 🔣🢩 🔣🢪 🔣🢫 🔣🢬 🔣🢭 🔣🢰 🔣🢱))